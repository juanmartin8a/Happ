scalar Upload

type EventCoordinates {
  latitude: Float!
  longitude: Float!
}

type User {
  id: Int!
  name: String!
  username: String!
  email: String!
  birthday: String!
  password: String!
  followState: Boolean!
  createdAt: String!
  updatedAt: String!
  profilePic: String!
}

type Event {
  id: Int!
  name: String!
  description: String!
  confirmedCount: Int!
  eventPics: String!
  eventDate: String!
  createdAt: String!
  updatedAt: String!
  coords: EventCoordinates!
}

type ErrorResponse {
  field: String!
  message: String!
}

input SignUpInput {
  name: String!
  username: String!
  email: String!
  password: String!
  birthday: String!
}

input SignInInput {
  usernameOrEmail: String!
  password: String!
}

input NewEventInput {
  name: String!
  description: String!
  eventDate: String!
  eventPics: [Upload!]!
  latitude: Float!,
  longitude: Float!,
}

type TokenResponse {
  refreshToken: String!
  accessToken: String!
}

type UserAuthResponse {
  user: User
  tokens: TokenResponse
  errors: [ErrorResponse!]
}

type CreateEventResponse {
  event: Event
  errors: [ErrorResponse!]
}

type AddResponse {
  value: Int!
  unchanged: Boolean!
}

type Query {
  user(
    username: String!
  ): User,
  userFromId(
    id: Int!
  ): User,
  searchUsers(
    search: String!
  ): [User!]!,
  userAccess: User,
}

type Mutation {
  signUp(
    input: SignUpInput!
  ): UserAuthResponse,
  signIn(
    input: SignInInput!
  ): UserAuthResponse,
  signOut(
    token: String!
  ): Boolean!
  refreshTokens(
    token: String!
  ): TokenResponse
  addOrRemoveUser(
    followUserId: Int!
    isFollow: Boolean!
  ): AddResponse!
  newEvent(
    input: NewEventInput!
  ): CreateEventResponse!
}