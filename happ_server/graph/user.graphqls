scalar Upload

# type Device {
#   token: String!
#   userID: Int!
#   createdAt: Strign!
# }

type User {
  id: Int!
  name: String!
  username: String!
  email: String!
  # birthday: String!
  # password: String!
  followState: Boolean!
  createdAt: String!
  updatedAt: String!
  profilePic: String!
}

type Event {
  id: Int!
  name: String!
  description: String!
  confirmedCount: Int!
  confirmedHosts: Int!
  eventPics: [String!]!
  lightEventPics: [String!]!
  eventDate: String!
  createdAt: String!
  updatedAt: String!
  eventPlace: String!
  coords: Coordinates!
}

type EventInviteRes {
  event: Event!
  invitedByUserId: Int!
  invitedBy: User!
  invitedUserInfo: InvitedUserInfo!
  friends: [User!]!
  # add 3 users;
  # isUserConfirmed: Boolean!
  # isUserHost: Boolean!
}

type PaginatedEventResults {
  events: [EventInviteRes!]!
  hasMore: Boolean!
}

type PaginatedEventUsersResults {
  users: [User!]!
  hasMore: Boolean!
}

type InvitedUserInfo {
  isConfirmed: Boolean!
  isHost: Boolean!
  isCreator: Boolean!
}

input SignUpInput {
  name: String!
  username: String!
  email: String!
  # password: String!
  # birthday: String!
}

enum SignInProvider {
  APPLE
  GOOGLE
}

input AppleData {
  name: String!,
  authorizationCode: String!
}

input SignInInput {
  token: String!
  provider: SignInProvider!
  appleData: AppleData
  # usernameOrEmail: String!
  # password: String!
}

type Coordinates {
  latitude: Float!
  longitude: Float!
}

input NewEventInput {
  name: String!
  description: String!
  eventDate: String!
  eventPics: [Upload!]!,
  eventPicsLight: [Upload!]!,
  eventPlace: String!,
  latitude: Float!,
  longitude: Float!,
}

input UpdateEventInput {
  name: String
  description: String
  eventDate: String
  eventPics: [UpdatePictureInput!],
  eventPicsLight: [UpdatePictureInput!],
  eventPlace: String,
  latitude: Float,
  longitude: Float,
}

input UpdatePictureInput {
  index: Int!
  file: Upload
  action: PictureAction!
}

enum PictureAction {
  ADD
  REPLACE
  DELETE
}

# type TokenResponse {
#   refreshToken: String!
#   accessToken: String!
# }

# type UserAuthResponse {
#   user: User
#   tokens: TokenResponse
#   errors: [ErrorResponse!]
# }

type SignInResponse {
  user: User
  isNew: Boolean
}

type CreateEventResponse {
  event: Event
  errors: [ErrorResponse!]
}

type AddResponse {
  value: Int!
  unchanged: Boolean!
  # isFriend: Boolean!
}

type AcceptInvitationResponse {
  cypherText: String
  isHost: Boolean!
}

type Query {
  user(
    username: String!
  ): User,
  userFromId(
    id: Int!
  ): User,
  searchUsers(
    search: String!
    userSearching: Int!
  ): [User!]!,
  userAccess: User,
  getAllEvents: [Event!]!,
  getAllGuests(
    eventId: Int!
  ): [User!]!,
  getUserEvents(
    limit: Int!
    idsList: [Int!]!
  ): PaginatedEventResults!,
  getUserEventsFromFriends(
    limit: Int!
    idsList: [Int!]!
  ): PaginatedEventResults!,
  getUserOtherEvents(
    limit: Int!
    idsList: [Int!]!
  ): PaginatedEventResults!,
  seePass(
    eventId: Int!
  ): String
  getEventGuests(
    eventId: Int!
    limit: Int!
    idsList: [Int!]!
  ): PaginatedEventUsersResults!,
  getEventHosts(
    eventId: Int!
    limit: Int!
    idsList: [Int!]!
  ): PaginatedEventUsersResults!,
  searchForUsersToAddAsGuests(
    search: String!
    eventId: Int!
  ): [User!]!,
}

type Mutation {
  # signUp(
  #   input: SignUpInput!
  # ): UserAuthResponse,
  signIn(
    input: SignInInput!
  ): SignInResponse!,
  deleteUser: Boolean!,
  # signOut(
  #   token: String!
  # ): Boolean!
  # refreshTokens(
  #   token: String!
  # ): TokenResponse
  addOrRemoveUser(
    followUserId: Int!
    isFollow: Boolean!
  ): AddResponse!
  newEvent(
    input: NewEventInput!
  ): CreateEventResponse!
  inviteGuestsAndOrganizers(
    guests: [Int!]!,
    organizers: [Int!]!,
    eventId: Int!
  ): Boolean!,
  acceptInvitation(
    eventId: Int!
  ): AcceptInvitationResponse!
  updateEvent(
    input: UpdateEventInput!,
    eventId: Int!
  ): CreateEventResponse!,
  deleteEvent(
    eventId: Int!
  ): Boolean
  addGuests(
    eventId: Int!
    userIds: [Int!]!
  ): Boolean
  removeGuests(
    eventId: Int!
    userIds: [Int!]!
  ): Boolean
  scanPass(
    eventId: Int!
    cypherText: String!
  ): Boolean
  leaveEvent(
    eventId: Int!
  ): Boolean
  saveDevice(
    token: String!
  ): Boolean
}

# 