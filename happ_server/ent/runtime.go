// Code generated by ent, DO NOT EDIT.

package ent

import (
	"happ/ent/device"
	"happ/ent/event"
	"happ/ent/eventuser"
	"happ/ent/follow"
	"happ/ent/schema"
	"happ/ent/user"
	"time"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	deviceFields := schema.Device{}.Fields()
	_ = deviceFields
	// deviceDescToken is the schema descriptor for token field.
	deviceDescToken := deviceFields[1].Descriptor()
	// device.TokenValidator is a validator for the "token" field. It is called by the builders before save.
	device.TokenValidator = deviceDescToken.Validators[0].(func(string) error)
	// deviceDescCreatedAt is the schema descriptor for created_at field.
	deviceDescCreatedAt := deviceFields[2].Descriptor()
	// device.DefaultCreatedAt holds the default value on creation for the created_at field.
	device.DefaultCreatedAt = deviceDescCreatedAt.Default.(func() time.Time)
	eventFields := schema.Event{}.Fields()
	_ = eventFields
	// eventDescName is the schema descriptor for name field.
	eventDescName := eventFields[0].Descriptor()
	// event.NameValidator is a validator for the "name" field. It is called by the builders before save.
	event.NameValidator = func() func(string) error {
		validators := eventDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// eventDescDescription is the schema descriptor for description field.
	eventDescDescription := eventFields[1].Descriptor()
	// event.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	event.DescriptionValidator = eventDescDescription.Validators[0].(func(string) error)
	// eventDescEventPlace is the schema descriptor for event_place field.
	eventDescEventPlace := eventFields[2].Descriptor()
	// event.EventPlaceValidator is a validator for the "event_place" field. It is called by the builders before save.
	event.EventPlaceValidator = eventDescEventPlace.Validators[0].(func(string) error)
	// eventDescConfirmedCount is the schema descriptor for confirmed_count field.
	eventDescConfirmedCount := eventFields[3].Descriptor()
	// event.DefaultConfirmedCount holds the default value on creation for the confirmed_count field.
	event.DefaultConfirmedCount = eventDescConfirmedCount.Default.(int)
	// eventDescConfirmedHosts is the schema descriptor for confirmed_hosts field.
	eventDescConfirmedHosts := eventFields[4].Descriptor()
	// event.DefaultConfirmedHosts holds the default value on creation for the confirmed_hosts field.
	event.DefaultConfirmedHosts = eventDescConfirmedHosts.Default.(int)
	// eventDescEventKey is the schema descriptor for event_key field.
	eventDescEventKey := eventFields[7].Descriptor()
	// event.EventKeyValidator is a validator for the "event_key" field. It is called by the builders before save.
	event.EventKeyValidator = eventDescEventKey.Validators[0].(func(string) error)
	// eventDescEventNonce is the schema descriptor for event_nonce field.
	eventDescEventNonce := eventFields[8].Descriptor()
	// event.EventNonceValidator is a validator for the "event_nonce" field. It is called by the builders before save.
	event.EventNonceValidator = eventDescEventNonce.Validators[0].(func(string) error)
	// eventDescCreatedAt is the schema descriptor for created_at field.
	eventDescCreatedAt := eventFields[11].Descriptor()
	// event.DefaultCreatedAt holds the default value on creation for the created_at field.
	event.DefaultCreatedAt = eventDescCreatedAt.Default.(func() time.Time)
	// eventDescUpdatedAt is the schema descriptor for updated_at field.
	eventDescUpdatedAt := eventFields[12].Descriptor()
	// event.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	event.DefaultUpdatedAt = eventDescUpdatedAt.Default.(func() time.Time)
	eventuserFields := schema.EventUser{}.Fields()
	_ = eventuserFields
	// eventuserDescAdmin is the schema descriptor for admin field.
	eventuserDescAdmin := eventuserFields[3].Descriptor()
	// eventuser.DefaultAdmin holds the default value on creation for the admin field.
	eventuser.DefaultAdmin = eventuserDescAdmin.Default.(bool)
	// eventuserDescCreator is the schema descriptor for creator field.
	eventuserDescCreator := eventuserFields[4].Descriptor()
	// eventuser.DefaultCreator holds the default value on creation for the creator field.
	eventuser.DefaultCreator = eventuserDescCreator.Default.(bool)
	// eventuserDescConfirmed is the schema descriptor for confirmed field.
	eventuserDescConfirmed := eventuserFields[5].Descriptor()
	// eventuser.DefaultConfirmed holds the default value on creation for the confirmed field.
	eventuser.DefaultConfirmed = eventuserDescConfirmed.Default.(bool)
	// eventuserDescCreatedAt is the schema descriptor for created_at field.
	eventuserDescCreatedAt := eventuserFields[6].Descriptor()
	// eventuser.DefaultCreatedAt holds the default value on creation for the created_at field.
	eventuser.DefaultCreatedAt = eventuserDescCreatedAt.Default.(func() time.Time)
	followFields := schema.Follow{}.Fields()
	_ = followFields
	// followDescValid is the schema descriptor for valid field.
	followDescValid := followFields[2].Descriptor()
	// follow.DefaultValid holds the default value on creation for the valid field.
	follow.DefaultValid = followDescValid.Default.(bool)
	// followDescCreatedAt is the schema descriptor for created_at field.
	followDescCreatedAt := followFields[3].Descriptor()
	// follow.DefaultCreatedAt holds the default value on creation for the created_at field.
	follow.DefaultCreatedAt = followDescCreatedAt.Default.(func() time.Time)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescFUID is the schema descriptor for FUID field.
	userDescFUID := userFields[0].Descriptor()
	// user.FUIDValidator is a validator for the "FUID" field. It is called by the builders before save.
	user.FUIDValidator = userDescFUID.Validators[0].(func(string) error)
	// userDescName is the schema descriptor for name field.
	userDescName := userFields[1].Descriptor()
	// user.NameValidator is a validator for the "name" field. It is called by the builders before save.
	user.NameValidator = func() func(string) error {
		validators := userDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescUsername is the schema descriptor for username field.
	userDescUsername := userFields[2].Descriptor()
	// user.UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	user.UsernameValidator = func() func(string) error {
		validators := userDescUsername.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(username string) error {
			for _, fn := range fns {
				if err := fn(username); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[3].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = userDescEmail.Validators[0].(func(string) error)
	// userDescProfilePic is the schema descriptor for profile_pic field.
	userDescProfilePic := userFields[4].Descriptor()
	// user.ProfilePicValidator is a validator for the "profile_pic" field. It is called by the builders before save.
	user.ProfilePicValidator = userDescProfilePic.Validators[0].(func(string) error)
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userFields[5].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescUpdatedAt is the schema descriptor for updated_at field.
	userDescUpdatedAt := userFields[6].Descriptor()
	// user.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	user.DefaultUpdatedAt = userDescUpdatedAt.Default.(func() time.Time)
}
