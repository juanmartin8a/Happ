// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"happ/ent/event"
	"happ/ent/eventremindernotification"
	"happ/ent/predicate"
	"happ/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EventReminderNotificationUpdate is the builder for updating EventReminderNotification entities.
type EventReminderNotificationUpdate struct {
	config
	hooks    []Hook
	mutation *EventReminderNotificationMutation
}

// Where appends a list predicates to the EventReminderNotificationUpdate builder.
func (ernu *EventReminderNotificationUpdate) Where(ps ...predicate.EventReminderNotification) *EventReminderNotificationUpdate {
	ernu.mutation.Where(ps...)
	return ernu
}

// SetEventID sets the "event_id" field.
func (ernu *EventReminderNotificationUpdate) SetEventID(i int) *EventReminderNotificationUpdate {
	ernu.mutation.SetEventID(i)
	return ernu
}

// SetUserID sets the "user_id" field.
func (ernu *EventReminderNotificationUpdate) SetUserID(i int) *EventReminderNotificationUpdate {
	ernu.mutation.SetUserID(i)
	return ernu
}

// SetDaysLeft sets the "days_left" field.
func (ernu *EventReminderNotificationUpdate) SetDaysLeft(i int) *EventReminderNotificationUpdate {
	ernu.mutation.ResetDaysLeft()
	ernu.mutation.SetDaysLeft(i)
	return ernu
}

// AddDaysLeft adds i to the "days_left" field.
func (ernu *EventReminderNotificationUpdate) AddDaysLeft(i int) *EventReminderNotificationUpdate {
	ernu.mutation.AddDaysLeft(i)
	return ernu
}

// SetSentAt sets the "sent_at" field.
func (ernu *EventReminderNotificationUpdate) SetSentAt(t time.Time) *EventReminderNotificationUpdate {
	ernu.mutation.SetSentAt(t)
	return ernu
}

// SetEvent sets the "event" edge to the Event entity.
func (ernu *EventReminderNotificationUpdate) SetEvent(e *Event) *EventReminderNotificationUpdate {
	return ernu.SetEventID(e.ID)
}

// SetUser sets the "user" edge to the User entity.
func (ernu *EventReminderNotificationUpdate) SetUser(u *User) *EventReminderNotificationUpdate {
	return ernu.SetUserID(u.ID)
}

// Mutation returns the EventReminderNotificationMutation object of the builder.
func (ernu *EventReminderNotificationUpdate) Mutation() *EventReminderNotificationMutation {
	return ernu.mutation
}

// ClearEvent clears the "event" edge to the Event entity.
func (ernu *EventReminderNotificationUpdate) ClearEvent() *EventReminderNotificationUpdate {
	ernu.mutation.ClearEvent()
	return ernu
}

// ClearUser clears the "user" edge to the User entity.
func (ernu *EventReminderNotificationUpdate) ClearUser() *EventReminderNotificationUpdate {
	ernu.mutation.ClearUser()
	return ernu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ernu *EventReminderNotificationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ernu.sqlSave, ernu.mutation, ernu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ernu *EventReminderNotificationUpdate) SaveX(ctx context.Context) int {
	affected, err := ernu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ernu *EventReminderNotificationUpdate) Exec(ctx context.Context) error {
	_, err := ernu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ernu *EventReminderNotificationUpdate) ExecX(ctx context.Context) {
	if err := ernu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ernu *EventReminderNotificationUpdate) check() error {
	if _, ok := ernu.mutation.EventID(); ernu.mutation.EventCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EventReminderNotification.event"`)
	}
	if _, ok := ernu.mutation.UserID(); ernu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EventReminderNotification.user"`)
	}
	return nil
}

func (ernu *EventReminderNotificationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ernu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(eventremindernotification.Table, eventremindernotification.Columns, sqlgraph.NewFieldSpec(eventremindernotification.FieldID, field.TypeInt))
	if ps := ernu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ernu.mutation.DaysLeft(); ok {
		_spec.SetField(eventremindernotification.FieldDaysLeft, field.TypeInt, value)
	}
	if value, ok := ernu.mutation.AddedDaysLeft(); ok {
		_spec.AddField(eventremindernotification.FieldDaysLeft, field.TypeInt, value)
	}
	if value, ok := ernu.mutation.SentAt(); ok {
		_spec.SetField(eventremindernotification.FieldSentAt, field.TypeTime, value)
	}
	if ernu.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventremindernotification.EventTable,
			Columns: []string{eventremindernotification.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ernu.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventremindernotification.EventTable,
			Columns: []string{eventremindernotification.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ernu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventremindernotification.UserTable,
			Columns: []string{eventremindernotification.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ernu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventremindernotification.UserTable,
			Columns: []string{eventremindernotification.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ernu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{eventremindernotification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ernu.mutation.done = true
	return n, nil
}

// EventReminderNotificationUpdateOne is the builder for updating a single EventReminderNotification entity.
type EventReminderNotificationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EventReminderNotificationMutation
}

// SetEventID sets the "event_id" field.
func (ernuo *EventReminderNotificationUpdateOne) SetEventID(i int) *EventReminderNotificationUpdateOne {
	ernuo.mutation.SetEventID(i)
	return ernuo
}

// SetUserID sets the "user_id" field.
func (ernuo *EventReminderNotificationUpdateOne) SetUserID(i int) *EventReminderNotificationUpdateOne {
	ernuo.mutation.SetUserID(i)
	return ernuo
}

// SetDaysLeft sets the "days_left" field.
func (ernuo *EventReminderNotificationUpdateOne) SetDaysLeft(i int) *EventReminderNotificationUpdateOne {
	ernuo.mutation.ResetDaysLeft()
	ernuo.mutation.SetDaysLeft(i)
	return ernuo
}

// AddDaysLeft adds i to the "days_left" field.
func (ernuo *EventReminderNotificationUpdateOne) AddDaysLeft(i int) *EventReminderNotificationUpdateOne {
	ernuo.mutation.AddDaysLeft(i)
	return ernuo
}

// SetSentAt sets the "sent_at" field.
func (ernuo *EventReminderNotificationUpdateOne) SetSentAt(t time.Time) *EventReminderNotificationUpdateOne {
	ernuo.mutation.SetSentAt(t)
	return ernuo
}

// SetEvent sets the "event" edge to the Event entity.
func (ernuo *EventReminderNotificationUpdateOne) SetEvent(e *Event) *EventReminderNotificationUpdateOne {
	return ernuo.SetEventID(e.ID)
}

// SetUser sets the "user" edge to the User entity.
func (ernuo *EventReminderNotificationUpdateOne) SetUser(u *User) *EventReminderNotificationUpdateOne {
	return ernuo.SetUserID(u.ID)
}

// Mutation returns the EventReminderNotificationMutation object of the builder.
func (ernuo *EventReminderNotificationUpdateOne) Mutation() *EventReminderNotificationMutation {
	return ernuo.mutation
}

// ClearEvent clears the "event" edge to the Event entity.
func (ernuo *EventReminderNotificationUpdateOne) ClearEvent() *EventReminderNotificationUpdateOne {
	ernuo.mutation.ClearEvent()
	return ernuo
}

// ClearUser clears the "user" edge to the User entity.
func (ernuo *EventReminderNotificationUpdateOne) ClearUser() *EventReminderNotificationUpdateOne {
	ernuo.mutation.ClearUser()
	return ernuo
}

// Where appends a list predicates to the EventReminderNotificationUpdate builder.
func (ernuo *EventReminderNotificationUpdateOne) Where(ps ...predicate.EventReminderNotification) *EventReminderNotificationUpdateOne {
	ernuo.mutation.Where(ps...)
	return ernuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ernuo *EventReminderNotificationUpdateOne) Select(field string, fields ...string) *EventReminderNotificationUpdateOne {
	ernuo.fields = append([]string{field}, fields...)
	return ernuo
}

// Save executes the query and returns the updated EventReminderNotification entity.
func (ernuo *EventReminderNotificationUpdateOne) Save(ctx context.Context) (*EventReminderNotification, error) {
	return withHooks(ctx, ernuo.sqlSave, ernuo.mutation, ernuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ernuo *EventReminderNotificationUpdateOne) SaveX(ctx context.Context) *EventReminderNotification {
	node, err := ernuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ernuo *EventReminderNotificationUpdateOne) Exec(ctx context.Context) error {
	_, err := ernuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ernuo *EventReminderNotificationUpdateOne) ExecX(ctx context.Context) {
	if err := ernuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ernuo *EventReminderNotificationUpdateOne) check() error {
	if _, ok := ernuo.mutation.EventID(); ernuo.mutation.EventCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EventReminderNotification.event"`)
	}
	if _, ok := ernuo.mutation.UserID(); ernuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EventReminderNotification.user"`)
	}
	return nil
}

func (ernuo *EventReminderNotificationUpdateOne) sqlSave(ctx context.Context) (_node *EventReminderNotification, err error) {
	if err := ernuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(eventremindernotification.Table, eventremindernotification.Columns, sqlgraph.NewFieldSpec(eventremindernotification.FieldID, field.TypeInt))
	id, ok := ernuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EventReminderNotification.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ernuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, eventremindernotification.FieldID)
		for _, f := range fields {
			if !eventremindernotification.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != eventremindernotification.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ernuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ernuo.mutation.DaysLeft(); ok {
		_spec.SetField(eventremindernotification.FieldDaysLeft, field.TypeInt, value)
	}
	if value, ok := ernuo.mutation.AddedDaysLeft(); ok {
		_spec.AddField(eventremindernotification.FieldDaysLeft, field.TypeInt, value)
	}
	if value, ok := ernuo.mutation.SentAt(); ok {
		_spec.SetField(eventremindernotification.FieldSentAt, field.TypeTime, value)
	}
	if ernuo.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventremindernotification.EventTable,
			Columns: []string{eventremindernotification.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ernuo.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventremindernotification.EventTable,
			Columns: []string{eventremindernotification.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ernuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventremindernotification.UserTable,
			Columns: []string{eventremindernotification.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ernuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventremindernotification.UserTable,
			Columns: []string{eventremindernotification.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EventReminderNotification{config: ernuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ernuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{eventremindernotification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ernuo.mutation.done = true
	return _node, nil
}
