// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"happ/ent/event"
	"happ/ent/eventuser"
	"happ/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EventUserCreate is the builder for creating a EventUser entity.
type EventUserCreate struct {
	config
	mutation *EventUserMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEventID sets the "event_id" field.
func (euc *EventUserCreate) SetEventID(i int) *EventUserCreate {
	euc.mutation.SetEventID(i)
	return euc
}

// SetUserID sets the "user_id" field.
func (euc *EventUserCreate) SetUserID(i int) *EventUserCreate {
	euc.mutation.SetUserID(i)
	return euc
}

// SetAdmin sets the "admin" field.
func (euc *EventUserCreate) SetAdmin(b bool) *EventUserCreate {
	euc.mutation.SetAdmin(b)
	return euc
}

// SetNillableAdmin sets the "admin" field if the given value is not nil.
func (euc *EventUserCreate) SetNillableAdmin(b *bool) *EventUserCreate {
	if b != nil {
		euc.SetAdmin(*b)
	}
	return euc
}

// SetCreatedAt sets the "created_at" field.
func (euc *EventUserCreate) SetCreatedAt(t time.Time) *EventUserCreate {
	euc.mutation.SetCreatedAt(t)
	return euc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (euc *EventUserCreate) SetNillableCreatedAt(t *time.Time) *EventUserCreate {
	if t != nil {
		euc.SetCreatedAt(*t)
	}
	return euc
}

// SetEvent sets the "event" edge to the Event entity.
func (euc *EventUserCreate) SetEvent(e *Event) *EventUserCreate {
	return euc.SetEventID(e.ID)
}

// SetUser sets the "user" edge to the User entity.
func (euc *EventUserCreate) SetUser(u *User) *EventUserCreate {
	return euc.SetUserID(u.ID)
}

// Mutation returns the EventUserMutation object of the builder.
func (euc *EventUserCreate) Mutation() *EventUserMutation {
	return euc.mutation
}

// Save creates the EventUser in the database.
func (euc *EventUserCreate) Save(ctx context.Context) (*EventUser, error) {
	var (
		err  error
		node *EventUser
	)
	euc.defaults()
	if len(euc.hooks) == 0 {
		if err = euc.check(); err != nil {
			return nil, err
		}
		node, err = euc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EventUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = euc.check(); err != nil {
				return nil, err
			}
			euc.mutation = mutation
			if node, err = euc.sqlSave(ctx); err != nil {
				return nil, err
			}
			return node, err
		})
		for i := len(euc.hooks) - 1; i >= 0; i-- {
			if euc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = euc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, euc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*EventUser)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from EventUserMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (euc *EventUserCreate) SaveX(ctx context.Context) *EventUser {
	v, err := euc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (euc *EventUserCreate) Exec(ctx context.Context) error {
	_, err := euc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euc *EventUserCreate) ExecX(ctx context.Context) {
	if err := euc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (euc *EventUserCreate) defaults() {
	if _, ok := euc.mutation.Admin(); !ok {
		v := eventuser.DefaultAdmin
		euc.mutation.SetAdmin(v)
	}
	if _, ok := euc.mutation.CreatedAt(); !ok {
		v := eventuser.DefaultCreatedAt()
		euc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euc *EventUserCreate) check() error {
	if _, ok := euc.mutation.EventID(); !ok {
		return &ValidationError{Name: "event_id", err: errors.New(`ent: missing required field "EventUser.event_id"`)}
	}
	if _, ok := euc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "EventUser.user_id"`)}
	}
	if _, ok := euc.mutation.Admin(); !ok {
		return &ValidationError{Name: "admin", err: errors.New(`ent: missing required field "EventUser.admin"`)}
	}
	if _, ok := euc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "EventUser.created_at"`)}
	}
	if _, ok := euc.mutation.EventID(); !ok {
		return &ValidationError{Name: "event", err: errors.New(`ent: missing required edge "EventUser.event"`)}
	}
	if _, ok := euc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "EventUser.user"`)}
	}
	return nil
}

func (euc *EventUserCreate) sqlSave(ctx context.Context) (*EventUser, error) {
	_node, _spec := euc.createSpec()
	if err := sqlgraph.CreateNode(ctx, euc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

func (euc *EventUserCreate) createSpec() (*EventUser, *sqlgraph.CreateSpec) {
	var (
		_node = &EventUser{config: euc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: eventuser.Table,
		}
	)
	_spec.OnConflict = euc.conflict
	if value, ok := euc.mutation.Admin(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: eventuser.FieldAdmin,
		})
		_node.Admin = value
	}
	if value, ok := euc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: eventuser.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if nodes := euc.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   eventuser.EventTable,
			Columns: []string{eventuser.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EventID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := euc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   eventuser.UserTable,
			Columns: []string{eventuser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.EventUser.Create().
//		SetEventID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EventUserUpsert) {
//			SetEventID(v+v).
//		}).
//		Exec(ctx)
//
func (euc *EventUserCreate) OnConflict(opts ...sql.ConflictOption) *EventUserUpsertOne {
	euc.conflict = opts
	return &EventUserUpsertOne{
		create: euc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.EventUser.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (euc *EventUserCreate) OnConflictColumns(columns ...string) *EventUserUpsertOne {
	euc.conflict = append(euc.conflict, sql.ConflictColumns(columns...))
	return &EventUserUpsertOne{
		create: euc,
	}
}

type (
	// EventUserUpsertOne is the builder for "upsert"-ing
	//  one EventUser node.
	EventUserUpsertOne struct {
		create *EventUserCreate
	}

	// EventUserUpsert is the "OnConflict" setter.
	EventUserUpsert struct {
		*sql.UpdateSet
	}
)

// SetEventID sets the "event_id" field.
func (u *EventUserUpsert) SetEventID(v int) *EventUserUpsert {
	u.Set(eventuser.FieldEventID, v)
	return u
}

// UpdateEventID sets the "event_id" field to the value that was provided on create.
func (u *EventUserUpsert) UpdateEventID() *EventUserUpsert {
	u.SetExcluded(eventuser.FieldEventID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *EventUserUpsert) SetUserID(v int) *EventUserUpsert {
	u.Set(eventuser.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *EventUserUpsert) UpdateUserID() *EventUserUpsert {
	u.SetExcluded(eventuser.FieldUserID)
	return u
}

// SetAdmin sets the "admin" field.
func (u *EventUserUpsert) SetAdmin(v bool) *EventUserUpsert {
	u.Set(eventuser.FieldAdmin, v)
	return u
}

// UpdateAdmin sets the "admin" field to the value that was provided on create.
func (u *EventUserUpsert) UpdateAdmin() *EventUserUpsert {
	u.SetExcluded(eventuser.FieldAdmin)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *EventUserUpsert) SetCreatedAt(v time.Time) *EventUserUpsert {
	u.Set(eventuser.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *EventUserUpsert) UpdateCreatedAt() *EventUserUpsert {
	u.SetExcluded(eventuser.FieldCreatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.EventUser.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *EventUserUpsertOne) UpdateNewValues() *EventUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(eventuser.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.EventUser.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *EventUserUpsertOne) Ignore() *EventUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EventUserUpsertOne) DoNothing() *EventUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EventUserCreate.OnConflict
// documentation for more info.
func (u *EventUserUpsertOne) Update(set func(*EventUserUpsert)) *EventUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EventUserUpsert{UpdateSet: update})
	}))
	return u
}

// SetEventID sets the "event_id" field.
func (u *EventUserUpsertOne) SetEventID(v int) *EventUserUpsertOne {
	return u.Update(func(s *EventUserUpsert) {
		s.SetEventID(v)
	})
}

// UpdateEventID sets the "event_id" field to the value that was provided on create.
func (u *EventUserUpsertOne) UpdateEventID() *EventUserUpsertOne {
	return u.Update(func(s *EventUserUpsert) {
		s.UpdateEventID()
	})
}

// SetUserID sets the "user_id" field.
func (u *EventUserUpsertOne) SetUserID(v int) *EventUserUpsertOne {
	return u.Update(func(s *EventUserUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *EventUserUpsertOne) UpdateUserID() *EventUserUpsertOne {
	return u.Update(func(s *EventUserUpsert) {
		s.UpdateUserID()
	})
}

// SetAdmin sets the "admin" field.
func (u *EventUserUpsertOne) SetAdmin(v bool) *EventUserUpsertOne {
	return u.Update(func(s *EventUserUpsert) {
		s.SetAdmin(v)
	})
}

// UpdateAdmin sets the "admin" field to the value that was provided on create.
func (u *EventUserUpsertOne) UpdateAdmin() *EventUserUpsertOne {
	return u.Update(func(s *EventUserUpsert) {
		s.UpdateAdmin()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *EventUserUpsertOne) SetCreatedAt(v time.Time) *EventUserUpsertOne {
	return u.Update(func(s *EventUserUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *EventUserUpsertOne) UpdateCreatedAt() *EventUserUpsertOne {
	return u.Update(func(s *EventUserUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *EventUserUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EventUserCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EventUserUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// EventUserCreateBulk is the builder for creating many EventUser entities in bulk.
type EventUserCreateBulk struct {
	config
	builders []*EventUserCreate
	conflict []sql.ConflictOption
}

// Save creates the EventUser entities in the database.
func (eucb *EventUserCreateBulk) Save(ctx context.Context) ([]*EventUser, error) {
	specs := make([]*sqlgraph.CreateSpec, len(eucb.builders))
	nodes := make([]*EventUser, len(eucb.builders))
	mutators := make([]Mutator, len(eucb.builders))
	for i := range eucb.builders {
		func(i int, root context.Context) {
			builder := eucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EventUserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, eucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = eucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, eucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, eucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (eucb *EventUserCreateBulk) SaveX(ctx context.Context) []*EventUser {
	v, err := eucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eucb *EventUserCreateBulk) Exec(ctx context.Context) error {
	_, err := eucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eucb *EventUserCreateBulk) ExecX(ctx context.Context) {
	if err := eucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.EventUser.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EventUserUpsert) {
//			SetEventID(v+v).
//		}).
//		Exec(ctx)
//
func (eucb *EventUserCreateBulk) OnConflict(opts ...sql.ConflictOption) *EventUserUpsertBulk {
	eucb.conflict = opts
	return &EventUserUpsertBulk{
		create: eucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.EventUser.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (eucb *EventUserCreateBulk) OnConflictColumns(columns ...string) *EventUserUpsertBulk {
	eucb.conflict = append(eucb.conflict, sql.ConflictColumns(columns...))
	return &EventUserUpsertBulk{
		create: eucb,
	}
}

// EventUserUpsertBulk is the builder for "upsert"-ing
// a bulk of EventUser nodes.
type EventUserUpsertBulk struct {
	create *EventUserCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.EventUser.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *EventUserUpsertBulk) UpdateNewValues() *EventUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(eventuser.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.EventUser.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *EventUserUpsertBulk) Ignore() *EventUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EventUserUpsertBulk) DoNothing() *EventUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EventUserCreateBulk.OnConflict
// documentation for more info.
func (u *EventUserUpsertBulk) Update(set func(*EventUserUpsert)) *EventUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EventUserUpsert{UpdateSet: update})
	}))
	return u
}

// SetEventID sets the "event_id" field.
func (u *EventUserUpsertBulk) SetEventID(v int) *EventUserUpsertBulk {
	return u.Update(func(s *EventUserUpsert) {
		s.SetEventID(v)
	})
}

// UpdateEventID sets the "event_id" field to the value that was provided on create.
func (u *EventUserUpsertBulk) UpdateEventID() *EventUserUpsertBulk {
	return u.Update(func(s *EventUserUpsert) {
		s.UpdateEventID()
	})
}

// SetUserID sets the "user_id" field.
func (u *EventUserUpsertBulk) SetUserID(v int) *EventUserUpsertBulk {
	return u.Update(func(s *EventUserUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *EventUserUpsertBulk) UpdateUserID() *EventUserUpsertBulk {
	return u.Update(func(s *EventUserUpsert) {
		s.UpdateUserID()
	})
}

// SetAdmin sets the "admin" field.
func (u *EventUserUpsertBulk) SetAdmin(v bool) *EventUserUpsertBulk {
	return u.Update(func(s *EventUserUpsert) {
		s.SetAdmin(v)
	})
}

// UpdateAdmin sets the "admin" field to the value that was provided on create.
func (u *EventUserUpsertBulk) UpdateAdmin() *EventUserUpsertBulk {
	return u.Update(func(s *EventUserUpsert) {
		s.UpdateAdmin()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *EventUserUpsertBulk) SetCreatedAt(v time.Time) *EventUserUpsertBulk {
	return u.Update(func(s *EventUserUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *EventUserUpsertBulk) UpdateCreatedAt() *EventUserUpsertBulk {
	return u.Update(func(s *EventUserUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *EventUserUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the EventUserCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EventUserCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EventUserUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
