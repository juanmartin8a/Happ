// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"happ/ent/event"
	"happ/ent/eventremindernotification"
	"happ/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EventReminderNotificationCreate is the builder for creating a EventReminderNotification entity.
type EventReminderNotificationCreate struct {
	config
	mutation *EventReminderNotificationMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEventID sets the "event_id" field.
func (ernc *EventReminderNotificationCreate) SetEventID(i int) *EventReminderNotificationCreate {
	ernc.mutation.SetEventID(i)
	return ernc
}

// SetUserID sets the "user_id" field.
func (ernc *EventReminderNotificationCreate) SetUserID(i int) *EventReminderNotificationCreate {
	ernc.mutation.SetUserID(i)
	return ernc
}

// SetDaysLeft sets the "days_left" field.
func (ernc *EventReminderNotificationCreate) SetDaysLeft(i int) *EventReminderNotificationCreate {
	ernc.mutation.SetDaysLeft(i)
	return ernc
}

// SetSentAt sets the "sent_at" field.
func (ernc *EventReminderNotificationCreate) SetSentAt(t time.Time) *EventReminderNotificationCreate {
	ernc.mutation.SetSentAt(t)
	return ernc
}

// SetEvent sets the "event" edge to the Event entity.
func (ernc *EventReminderNotificationCreate) SetEvent(e *Event) *EventReminderNotificationCreate {
	return ernc.SetEventID(e.ID)
}

// SetUser sets the "user" edge to the User entity.
func (ernc *EventReminderNotificationCreate) SetUser(u *User) *EventReminderNotificationCreate {
	return ernc.SetUserID(u.ID)
}

// Mutation returns the EventReminderNotificationMutation object of the builder.
func (ernc *EventReminderNotificationCreate) Mutation() *EventReminderNotificationMutation {
	return ernc.mutation
}

// Save creates the EventReminderNotification in the database.
func (ernc *EventReminderNotificationCreate) Save(ctx context.Context) (*EventReminderNotification, error) {
	return withHooks[*EventReminderNotification, EventReminderNotificationMutation](ctx, ernc.sqlSave, ernc.mutation, ernc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ernc *EventReminderNotificationCreate) SaveX(ctx context.Context) *EventReminderNotification {
	v, err := ernc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ernc *EventReminderNotificationCreate) Exec(ctx context.Context) error {
	_, err := ernc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ernc *EventReminderNotificationCreate) ExecX(ctx context.Context) {
	if err := ernc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ernc *EventReminderNotificationCreate) check() error {
	if _, ok := ernc.mutation.EventID(); !ok {
		return &ValidationError{Name: "event_id", err: errors.New(`ent: missing required field "EventReminderNotification.event_id"`)}
	}
	if _, ok := ernc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "EventReminderNotification.user_id"`)}
	}
	if _, ok := ernc.mutation.DaysLeft(); !ok {
		return &ValidationError{Name: "days_left", err: errors.New(`ent: missing required field "EventReminderNotification.days_left"`)}
	}
	if _, ok := ernc.mutation.SentAt(); !ok {
		return &ValidationError{Name: "sent_at", err: errors.New(`ent: missing required field "EventReminderNotification.sent_at"`)}
	}
	if _, ok := ernc.mutation.EventID(); !ok {
		return &ValidationError{Name: "event", err: errors.New(`ent: missing required edge "EventReminderNotification.event"`)}
	}
	if _, ok := ernc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "EventReminderNotification.user"`)}
	}
	return nil
}

func (ernc *EventReminderNotificationCreate) sqlSave(ctx context.Context) (*EventReminderNotification, error) {
	if err := ernc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ernc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ernc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ernc.mutation.id = &_node.ID
	ernc.mutation.done = true
	return _node, nil
}

func (ernc *EventReminderNotificationCreate) createSpec() (*EventReminderNotification, *sqlgraph.CreateSpec) {
	var (
		_node = &EventReminderNotification{config: ernc.config}
		_spec = sqlgraph.NewCreateSpec(eventremindernotification.Table, sqlgraph.NewFieldSpec(eventremindernotification.FieldID, field.TypeInt))
	)
	_spec.OnConflict = ernc.conflict
	if value, ok := ernc.mutation.DaysLeft(); ok {
		_spec.SetField(eventremindernotification.FieldDaysLeft, field.TypeInt, value)
		_node.DaysLeft = value
	}
	if value, ok := ernc.mutation.SentAt(); ok {
		_spec.SetField(eventremindernotification.FieldSentAt, field.TypeTime, value)
		_node.SentAt = value
	}
	if nodes := ernc.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventremindernotification.EventTable,
			Columns: []string{eventremindernotification.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EventID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ernc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventremindernotification.UserTable,
			Columns: []string{eventremindernotification.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.EventReminderNotification.Create().
//		SetEventID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EventReminderNotificationUpsert) {
//			SetEventID(v+v).
//		}).
//		Exec(ctx)
//
func (ernc *EventReminderNotificationCreate) OnConflict(opts ...sql.ConflictOption) *EventReminderNotificationUpsertOne {
	ernc.conflict = opts
	return &EventReminderNotificationUpsertOne{
		create: ernc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.EventReminderNotification.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ernc *EventReminderNotificationCreate) OnConflictColumns(columns ...string) *EventReminderNotificationUpsertOne {
	ernc.conflict = append(ernc.conflict, sql.ConflictColumns(columns...))
	return &EventReminderNotificationUpsertOne{
		create: ernc,
	}
}

type (
	// EventReminderNotificationUpsertOne is the builder for "upsert"-ing
	//  one EventReminderNotification node.
	EventReminderNotificationUpsertOne struct {
		create *EventReminderNotificationCreate
	}

	// EventReminderNotificationUpsert is the "OnConflict" setter.
	EventReminderNotificationUpsert struct {
		*sql.UpdateSet
	}
)

// SetEventID sets the "event_id" field.
func (u *EventReminderNotificationUpsert) SetEventID(v int) *EventReminderNotificationUpsert {
	u.Set(eventremindernotification.FieldEventID, v)
	return u
}

// UpdateEventID sets the "event_id" field to the value that was provided on create.
func (u *EventReminderNotificationUpsert) UpdateEventID() *EventReminderNotificationUpsert {
	u.SetExcluded(eventremindernotification.FieldEventID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *EventReminderNotificationUpsert) SetUserID(v int) *EventReminderNotificationUpsert {
	u.Set(eventremindernotification.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *EventReminderNotificationUpsert) UpdateUserID() *EventReminderNotificationUpsert {
	u.SetExcluded(eventremindernotification.FieldUserID)
	return u
}

// SetDaysLeft sets the "days_left" field.
func (u *EventReminderNotificationUpsert) SetDaysLeft(v int) *EventReminderNotificationUpsert {
	u.Set(eventremindernotification.FieldDaysLeft, v)
	return u
}

// UpdateDaysLeft sets the "days_left" field to the value that was provided on create.
func (u *EventReminderNotificationUpsert) UpdateDaysLeft() *EventReminderNotificationUpsert {
	u.SetExcluded(eventremindernotification.FieldDaysLeft)
	return u
}

// AddDaysLeft adds v to the "days_left" field.
func (u *EventReminderNotificationUpsert) AddDaysLeft(v int) *EventReminderNotificationUpsert {
	u.Add(eventremindernotification.FieldDaysLeft, v)
	return u
}

// SetSentAt sets the "sent_at" field.
func (u *EventReminderNotificationUpsert) SetSentAt(v time.Time) *EventReminderNotificationUpsert {
	u.Set(eventremindernotification.FieldSentAt, v)
	return u
}

// UpdateSentAt sets the "sent_at" field to the value that was provided on create.
func (u *EventReminderNotificationUpsert) UpdateSentAt() *EventReminderNotificationUpsert {
	u.SetExcluded(eventremindernotification.FieldSentAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.EventReminderNotification.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *EventReminderNotificationUpsertOne) UpdateNewValues() *EventReminderNotificationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.EventReminderNotification.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *EventReminderNotificationUpsertOne) Ignore() *EventReminderNotificationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EventReminderNotificationUpsertOne) DoNothing() *EventReminderNotificationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EventReminderNotificationCreate.OnConflict
// documentation for more info.
func (u *EventReminderNotificationUpsertOne) Update(set func(*EventReminderNotificationUpsert)) *EventReminderNotificationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EventReminderNotificationUpsert{UpdateSet: update})
	}))
	return u
}

// SetEventID sets the "event_id" field.
func (u *EventReminderNotificationUpsertOne) SetEventID(v int) *EventReminderNotificationUpsertOne {
	return u.Update(func(s *EventReminderNotificationUpsert) {
		s.SetEventID(v)
	})
}

// UpdateEventID sets the "event_id" field to the value that was provided on create.
func (u *EventReminderNotificationUpsertOne) UpdateEventID() *EventReminderNotificationUpsertOne {
	return u.Update(func(s *EventReminderNotificationUpsert) {
		s.UpdateEventID()
	})
}

// SetUserID sets the "user_id" field.
func (u *EventReminderNotificationUpsertOne) SetUserID(v int) *EventReminderNotificationUpsertOne {
	return u.Update(func(s *EventReminderNotificationUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *EventReminderNotificationUpsertOne) UpdateUserID() *EventReminderNotificationUpsertOne {
	return u.Update(func(s *EventReminderNotificationUpsert) {
		s.UpdateUserID()
	})
}

// SetDaysLeft sets the "days_left" field.
func (u *EventReminderNotificationUpsertOne) SetDaysLeft(v int) *EventReminderNotificationUpsertOne {
	return u.Update(func(s *EventReminderNotificationUpsert) {
		s.SetDaysLeft(v)
	})
}

// AddDaysLeft adds v to the "days_left" field.
func (u *EventReminderNotificationUpsertOne) AddDaysLeft(v int) *EventReminderNotificationUpsertOne {
	return u.Update(func(s *EventReminderNotificationUpsert) {
		s.AddDaysLeft(v)
	})
}

// UpdateDaysLeft sets the "days_left" field to the value that was provided on create.
func (u *EventReminderNotificationUpsertOne) UpdateDaysLeft() *EventReminderNotificationUpsertOne {
	return u.Update(func(s *EventReminderNotificationUpsert) {
		s.UpdateDaysLeft()
	})
}

// SetSentAt sets the "sent_at" field.
func (u *EventReminderNotificationUpsertOne) SetSentAt(v time.Time) *EventReminderNotificationUpsertOne {
	return u.Update(func(s *EventReminderNotificationUpsert) {
		s.SetSentAt(v)
	})
}

// UpdateSentAt sets the "sent_at" field to the value that was provided on create.
func (u *EventReminderNotificationUpsertOne) UpdateSentAt() *EventReminderNotificationUpsertOne {
	return u.Update(func(s *EventReminderNotificationUpsert) {
		s.UpdateSentAt()
	})
}

// Exec executes the query.
func (u *EventReminderNotificationUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EventReminderNotificationCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EventReminderNotificationUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *EventReminderNotificationUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *EventReminderNotificationUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// EventReminderNotificationCreateBulk is the builder for creating many EventReminderNotification entities in bulk.
type EventReminderNotificationCreateBulk struct {
	config
	builders []*EventReminderNotificationCreate
	conflict []sql.ConflictOption
}

// Save creates the EventReminderNotification entities in the database.
func (erncb *EventReminderNotificationCreateBulk) Save(ctx context.Context) ([]*EventReminderNotification, error) {
	specs := make([]*sqlgraph.CreateSpec, len(erncb.builders))
	nodes := make([]*EventReminderNotification, len(erncb.builders))
	mutators := make([]Mutator, len(erncb.builders))
	for i := range erncb.builders {
		func(i int, root context.Context) {
			builder := erncb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EventReminderNotificationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, erncb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = erncb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, erncb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, erncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (erncb *EventReminderNotificationCreateBulk) SaveX(ctx context.Context) []*EventReminderNotification {
	v, err := erncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (erncb *EventReminderNotificationCreateBulk) Exec(ctx context.Context) error {
	_, err := erncb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (erncb *EventReminderNotificationCreateBulk) ExecX(ctx context.Context) {
	if err := erncb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.EventReminderNotification.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EventReminderNotificationUpsert) {
//			SetEventID(v+v).
//		}).
//		Exec(ctx)
//
func (erncb *EventReminderNotificationCreateBulk) OnConflict(opts ...sql.ConflictOption) *EventReminderNotificationUpsertBulk {
	erncb.conflict = opts
	return &EventReminderNotificationUpsertBulk{
		create: erncb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.EventReminderNotification.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (erncb *EventReminderNotificationCreateBulk) OnConflictColumns(columns ...string) *EventReminderNotificationUpsertBulk {
	erncb.conflict = append(erncb.conflict, sql.ConflictColumns(columns...))
	return &EventReminderNotificationUpsertBulk{
		create: erncb,
	}
}

// EventReminderNotificationUpsertBulk is the builder for "upsert"-ing
// a bulk of EventReminderNotification nodes.
type EventReminderNotificationUpsertBulk struct {
	create *EventReminderNotificationCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.EventReminderNotification.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *EventReminderNotificationUpsertBulk) UpdateNewValues() *EventReminderNotificationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.EventReminderNotification.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *EventReminderNotificationUpsertBulk) Ignore() *EventReminderNotificationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EventReminderNotificationUpsertBulk) DoNothing() *EventReminderNotificationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EventReminderNotificationCreateBulk.OnConflict
// documentation for more info.
func (u *EventReminderNotificationUpsertBulk) Update(set func(*EventReminderNotificationUpsert)) *EventReminderNotificationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EventReminderNotificationUpsert{UpdateSet: update})
	}))
	return u
}

// SetEventID sets the "event_id" field.
func (u *EventReminderNotificationUpsertBulk) SetEventID(v int) *EventReminderNotificationUpsertBulk {
	return u.Update(func(s *EventReminderNotificationUpsert) {
		s.SetEventID(v)
	})
}

// UpdateEventID sets the "event_id" field to the value that was provided on create.
func (u *EventReminderNotificationUpsertBulk) UpdateEventID() *EventReminderNotificationUpsertBulk {
	return u.Update(func(s *EventReminderNotificationUpsert) {
		s.UpdateEventID()
	})
}

// SetUserID sets the "user_id" field.
func (u *EventReminderNotificationUpsertBulk) SetUserID(v int) *EventReminderNotificationUpsertBulk {
	return u.Update(func(s *EventReminderNotificationUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *EventReminderNotificationUpsertBulk) UpdateUserID() *EventReminderNotificationUpsertBulk {
	return u.Update(func(s *EventReminderNotificationUpsert) {
		s.UpdateUserID()
	})
}

// SetDaysLeft sets the "days_left" field.
func (u *EventReminderNotificationUpsertBulk) SetDaysLeft(v int) *EventReminderNotificationUpsertBulk {
	return u.Update(func(s *EventReminderNotificationUpsert) {
		s.SetDaysLeft(v)
	})
}

// AddDaysLeft adds v to the "days_left" field.
func (u *EventReminderNotificationUpsertBulk) AddDaysLeft(v int) *EventReminderNotificationUpsertBulk {
	return u.Update(func(s *EventReminderNotificationUpsert) {
		s.AddDaysLeft(v)
	})
}

// UpdateDaysLeft sets the "days_left" field to the value that was provided on create.
func (u *EventReminderNotificationUpsertBulk) UpdateDaysLeft() *EventReminderNotificationUpsertBulk {
	return u.Update(func(s *EventReminderNotificationUpsert) {
		s.UpdateDaysLeft()
	})
}

// SetSentAt sets the "sent_at" field.
func (u *EventReminderNotificationUpsertBulk) SetSentAt(v time.Time) *EventReminderNotificationUpsertBulk {
	return u.Update(func(s *EventReminderNotificationUpsert) {
		s.SetSentAt(v)
	})
}

// UpdateSentAt sets the "sent_at" field to the value that was provided on create.
func (u *EventReminderNotificationUpsertBulk) UpdateSentAt() *EventReminderNotificationUpsertBulk {
	return u.Update(func(s *EventReminderNotificationUpsert) {
		s.UpdateSentAt()
	})
}

// Exec executes the query.
func (u *EventReminderNotificationUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the EventReminderNotificationCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EventReminderNotificationCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EventReminderNotificationUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
