// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"happ/ent/device"
	"happ/ent/event"
	"happ/ent/eventremindernotification"
	"happ/ent/user"

	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (d *DeviceQuery) CollectFields(ctx context.Context, satisfies ...string) (*DeviceQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return d, nil
	}
	if err := d.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return d, nil
}

func (d *DeviceQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(device.Columns))
		selectedFields = []string{device.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "owner":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: d.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			d.withOwner = query
		case "userID":
			if _, ok := fieldSeen[device.FieldUserID]; !ok {
				selectedFields = append(selectedFields, device.FieldUserID)
				fieldSeen[device.FieldUserID] = struct{}{}
			}
		case "token":
			if _, ok := fieldSeen[device.FieldToken]; !ok {
				selectedFields = append(selectedFields, device.FieldToken)
				fieldSeen[device.FieldToken] = struct{}{}
			}
		case "createdAt":
			if _, ok := fieldSeen[device.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, device.FieldCreatedAt)
				fieldSeen[device.FieldCreatedAt] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		d.Select(selectedFields...)
	}
	return nil
}

type devicePaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []DevicePaginateOption
}

func newDevicePaginateArgs(rv map[string]any) *devicePaginateArgs {
	args := &devicePaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (e *EventQuery) CollectFields(ctx context.Context, satisfies ...string) (*EventQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return e, nil
	}
	if err := e.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return e, nil
}

func (e *EventQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(event.Columns))
		selectedFields = []string{event.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "users":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: e.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			e.WithNamedUsers(alias, func(wq *UserQuery) {
				*wq = *query
			})
		case "eventReminderNotifications":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&EventReminderNotificationClient{config: e.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			e.WithNamedEventReminderNotifications(alias, func(wq *EventReminderNotificationQuery) {
				*wq = *query
			})
		case "name":
			if _, ok := fieldSeen[event.FieldName]; !ok {
				selectedFields = append(selectedFields, event.FieldName)
				fieldSeen[event.FieldName] = struct{}{}
			}
		case "description":
			if _, ok := fieldSeen[event.FieldDescription]; !ok {
				selectedFields = append(selectedFields, event.FieldDescription)
				fieldSeen[event.FieldDescription] = struct{}{}
			}
		case "eventPlace":
			if _, ok := fieldSeen[event.FieldEventPlace]; !ok {
				selectedFields = append(selectedFields, event.FieldEventPlace)
				fieldSeen[event.FieldEventPlace] = struct{}{}
			}
		case "confirmedCount":
			if _, ok := fieldSeen[event.FieldConfirmedCount]; !ok {
				selectedFields = append(selectedFields, event.FieldConfirmedCount)
				fieldSeen[event.FieldConfirmedCount] = struct{}{}
			}
		case "confirmedHosts":
			if _, ok := fieldSeen[event.FieldConfirmedHosts]; !ok {
				selectedFields = append(selectedFields, event.FieldConfirmedHosts)
				fieldSeen[event.FieldConfirmedHosts] = struct{}{}
			}
		case "eventPics":
			if _, ok := fieldSeen[event.FieldEventPics]; !ok {
				selectedFields = append(selectedFields, event.FieldEventPics)
				fieldSeen[event.FieldEventPics] = struct{}{}
			}
		case "lightEventPics":
			if _, ok := fieldSeen[event.FieldLightEventPics]; !ok {
				selectedFields = append(selectedFields, event.FieldLightEventPics)
				fieldSeen[event.FieldLightEventPics] = struct{}{}
			}
		case "eventKey":
			if _, ok := fieldSeen[event.FieldEventKey]; !ok {
				selectedFields = append(selectedFields, event.FieldEventKey)
				fieldSeen[event.FieldEventKey] = struct{}{}
			}
		case "eventNonce":
			if _, ok := fieldSeen[event.FieldEventNonce]; !ok {
				selectedFields = append(selectedFields, event.FieldEventNonce)
				fieldSeen[event.FieldEventNonce] = struct{}{}
			}
		case "eventDate":
			if _, ok := fieldSeen[event.FieldEventDate]; !ok {
				selectedFields = append(selectedFields, event.FieldEventDate)
				fieldSeen[event.FieldEventDate] = struct{}{}
			}
		case "coords":
			if _, ok := fieldSeen[event.FieldCoords]; !ok {
				selectedFields = append(selectedFields, event.FieldCoords)
				fieldSeen[event.FieldCoords] = struct{}{}
			}
		case "createdAt":
			if _, ok := fieldSeen[event.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, event.FieldCreatedAt)
				fieldSeen[event.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[event.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, event.FieldUpdatedAt)
				fieldSeen[event.FieldUpdatedAt] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		e.Select(selectedFields...)
	}
	return nil
}

type eventPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []EventPaginateOption
}

func newEventPaginateArgs(rv map[string]any) *eventPaginateArgs {
	args := &eventPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (ern *EventReminderNotificationQuery) CollectFields(ctx context.Context, satisfies ...string) (*EventReminderNotificationQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return ern, nil
	}
	if err := ern.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return ern, nil
}

func (ern *EventReminderNotificationQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(eventremindernotification.Columns))
		selectedFields = []string{eventremindernotification.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "event":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&EventClient{config: ern.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			ern.withEvent = query
			if _, ok := fieldSeen[eventremindernotification.FieldEventID]; !ok {
				selectedFields = append(selectedFields, eventremindernotification.FieldEventID)
				fieldSeen[eventremindernotification.FieldEventID] = struct{}{}
			}
		case "user":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: ern.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			ern.withUser = query
			if _, ok := fieldSeen[eventremindernotification.FieldUserID]; !ok {
				selectedFields = append(selectedFields, eventremindernotification.FieldUserID)
				fieldSeen[eventremindernotification.FieldUserID] = struct{}{}
			}
		case "eventID":
			if _, ok := fieldSeen[eventremindernotification.FieldEventID]; !ok {
				selectedFields = append(selectedFields, eventremindernotification.FieldEventID)
				fieldSeen[eventremindernotification.FieldEventID] = struct{}{}
			}
		case "userID":
			if _, ok := fieldSeen[eventremindernotification.FieldUserID]; !ok {
				selectedFields = append(selectedFields, eventremindernotification.FieldUserID)
				fieldSeen[eventremindernotification.FieldUserID] = struct{}{}
			}
		case "daysLeft":
			if _, ok := fieldSeen[eventremindernotification.FieldDaysLeft]; !ok {
				selectedFields = append(selectedFields, eventremindernotification.FieldDaysLeft)
				fieldSeen[eventremindernotification.FieldDaysLeft] = struct{}{}
			}
		case "sentAt":
			if _, ok := fieldSeen[eventremindernotification.FieldSentAt]; !ok {
				selectedFields = append(selectedFields, eventremindernotification.FieldSentAt)
				fieldSeen[eventremindernotification.FieldSentAt] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		ern.Select(selectedFields...)
	}
	return nil
}

type eventremindernotificationPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []EventReminderNotificationPaginateOption
}

func newEventReminderNotificationPaginateArgs(rv map[string]any) *eventremindernotificationPaginateArgs {
	args := &eventremindernotificationPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (u *UserQuery) CollectFields(ctx context.Context, satisfies ...string) (*UserQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return u, nil
	}
	if err := u.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return u, nil
}

func (u *UserQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(user.Columns))
		selectedFields = []string{user.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "events":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&EventClient{config: u.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			u.WithNamedEvents(alias, func(wq *EventQuery) {
				*wq = *query
			})
		case "followers":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: u.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			u.WithNamedFollowers(alias, func(wq *UserQuery) {
				*wq = *query
			})
		case "following":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: u.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			u.WithNamedFollowing(alias, func(wq *UserQuery) {
				*wq = *query
			})
		case "devices":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&DeviceClient{config: u.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			u.WithNamedDevices(alias, func(wq *DeviceQuery) {
				*wq = *query
			})
		case "eventReminderNotifications":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&EventReminderNotificationClient{config: u.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			u.WithNamedEventReminderNotifications(alias, func(wq *EventReminderNotificationQuery) {
				*wq = *query
			})
		case "fuid":
			if _, ok := fieldSeen[user.FieldFUID]; !ok {
				selectedFields = append(selectedFields, user.FieldFUID)
				fieldSeen[user.FieldFUID] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[user.FieldName]; !ok {
				selectedFields = append(selectedFields, user.FieldName)
				fieldSeen[user.FieldName] = struct{}{}
			}
		case "username":
			if _, ok := fieldSeen[user.FieldUsername]; !ok {
				selectedFields = append(selectedFields, user.FieldUsername)
				fieldSeen[user.FieldUsername] = struct{}{}
			}
		case "email":
			if _, ok := fieldSeen[user.FieldEmail]; !ok {
				selectedFields = append(selectedFields, user.FieldEmail)
				fieldSeen[user.FieldEmail] = struct{}{}
			}
		case "profilePic":
			if _, ok := fieldSeen[user.FieldProfilePic]; !ok {
				selectedFields = append(selectedFields, user.FieldProfilePic)
				fieldSeen[user.FieldProfilePic] = struct{}{}
			}
		case "createdAt":
			if _, ok := fieldSeen[user.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, user.FieldCreatedAt)
				fieldSeen[user.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[user.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, user.FieldUpdatedAt)
				fieldSeen[user.FieldUpdatedAt] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		u.Select(selectedFields...)
	}
	return nil
}

type userPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []UserPaginateOption
}

func newUserPaginateArgs(rv map[string]any) *userPaginateArgs {
	args := &userPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

const (
	afterField     = "after"
	firstField     = "first"
	beforeField    = "before"
	lastField      = "last"
	orderByField   = "orderBy"
	directionField = "direction"
	fieldField     = "field"
	whereField     = "where"
)

func fieldArgs(ctx context.Context, whereInput any, path ...string) map[string]any {
	field := collectedField(ctx, path...)
	if field == nil || field.Arguments == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	args := field.ArgumentMap(oc.Variables)
	return unmarshalArgs(ctx, whereInput, args)
}

// unmarshalArgs allows extracting the field arguments from their raw representation.
func unmarshalArgs(ctx context.Context, whereInput any, args map[string]any) map[string]any {
	for _, k := range []string{firstField, lastField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		i, err := graphql.UnmarshalInt(v)
		if err == nil {
			args[k] = &i
		}
	}
	for _, k := range []string{beforeField, afterField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		c := &Cursor{}
		if c.UnmarshalGQL(v) == nil {
			args[k] = c
		}
	}
	if v, ok := args[whereField]; ok && whereInput != nil {
		if err := graphql.UnmarshalInputFromContext(ctx, v, whereInput); err == nil {
			args[whereField] = whereInput
		}
	}

	return args
}

func limitRows(partitionBy string, limit int, orderBy ...sql.Querier) func(s *sql.Selector) {
	return func(s *sql.Selector) {
		d := sql.Dialect(s.Dialect())
		s.SetDistinct(false)
		with := d.With("src_query").
			As(s.Clone()).
			With("limited_query").
			As(
				d.Select("*").
					AppendSelectExprAs(
						sql.RowNumber().PartitionBy(partitionBy).OrderExpr(orderBy...),
						"row_number",
					).
					From(d.Table("src_query")),
			)
		t := d.Table("limited_query").As(s.TableName())
		*s = *d.Select(s.UnqualifiedColumns()...).
			From(t).
			Where(sql.LTE(t.C("row_number"), limit)).
			Prefix(with)
	}
}

// mayAddCondition appends another type condition to the satisfies list
// if condition is enabled (Node/Nodes) and it does not exist in the list.
func mayAddCondition(satisfies []string, typeCond string) []string {
	if len(satisfies) == 0 {
		return satisfies
	}
	for _, s := range satisfies {
		if typeCond == s {
			return satisfies
		}
	}
	return append(satisfies, typeCond)
}
