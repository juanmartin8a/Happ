// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"happ/ent/event"
	"happ/ent/eventremindernotification"
	"happ/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// EventReminderNotification is the model entity for the EventReminderNotification schema.
type EventReminderNotification struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// EventID holds the value of the "event_id" field.
	EventID int `json:"event_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// DaysLeft holds the value of the "days_left" field.
	DaysLeft int `json:"days_left,omitempty"`
	// SentAt holds the value of the "sent_at" field.
	SentAt time.Time `json:"sent_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EventReminderNotificationQuery when eager-loading is set.
	Edges        EventReminderNotificationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// EventReminderNotificationEdges holds the relations/edges for other nodes in the graph.
type EventReminderNotificationEdges struct {
	// Event holds the value of the event edge.
	Event *Event `json:"event,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// EventOrErr returns the Event value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventReminderNotificationEdges) EventOrErr() (*Event, error) {
	if e.loadedTypes[0] {
		if e.Event == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: event.Label}
		}
		return e.Event, nil
	}
	return nil, &NotLoadedError{edge: "event"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventReminderNotificationEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EventReminderNotification) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case eventremindernotification.FieldID, eventremindernotification.FieldEventID, eventremindernotification.FieldUserID, eventremindernotification.FieldDaysLeft:
			values[i] = new(sql.NullInt64)
		case eventremindernotification.FieldSentAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EventReminderNotification fields.
func (ern *EventReminderNotification) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case eventremindernotification.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ern.ID = int(value.Int64)
		case eventremindernotification.FieldEventID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field event_id", values[i])
			} else if value.Valid {
				ern.EventID = int(value.Int64)
			}
		case eventremindernotification.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				ern.UserID = int(value.Int64)
			}
		case eventremindernotification.FieldDaysLeft:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field days_left", values[i])
			} else if value.Valid {
				ern.DaysLeft = int(value.Int64)
			}
		case eventremindernotification.FieldSentAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field sent_at", values[i])
			} else if value.Valid {
				ern.SentAt = value.Time
			}
		default:
			ern.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EventReminderNotification.
// This includes values selected through modifiers, order, etc.
func (ern *EventReminderNotification) Value(name string) (ent.Value, error) {
	return ern.selectValues.Get(name)
}

// QueryEvent queries the "event" edge of the EventReminderNotification entity.
func (ern *EventReminderNotification) QueryEvent() *EventQuery {
	return NewEventReminderNotificationClient(ern.config).QueryEvent(ern)
}

// QueryUser queries the "user" edge of the EventReminderNotification entity.
func (ern *EventReminderNotification) QueryUser() *UserQuery {
	return NewEventReminderNotificationClient(ern.config).QueryUser(ern)
}

// Update returns a builder for updating this EventReminderNotification.
// Note that you need to call EventReminderNotification.Unwrap() before calling this method if this EventReminderNotification
// was returned from a transaction, and the transaction was committed or rolled back.
func (ern *EventReminderNotification) Update() *EventReminderNotificationUpdateOne {
	return NewEventReminderNotificationClient(ern.config).UpdateOne(ern)
}

// Unwrap unwraps the EventReminderNotification entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ern *EventReminderNotification) Unwrap() *EventReminderNotification {
	_tx, ok := ern.config.driver.(*txDriver)
	if !ok {
		panic("ent: EventReminderNotification is not a transactional entity")
	}
	ern.config.driver = _tx.drv
	return ern
}

// String implements the fmt.Stringer.
func (ern *EventReminderNotification) String() string {
	var builder strings.Builder
	builder.WriteString("EventReminderNotification(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ern.ID))
	builder.WriteString("event_id=")
	builder.WriteString(fmt.Sprintf("%v", ern.EventID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", ern.UserID))
	builder.WriteString(", ")
	builder.WriteString("days_left=")
	builder.WriteString(fmt.Sprintf("%v", ern.DaysLeft))
	builder.WriteString(", ")
	builder.WriteString("sent_at=")
	builder.WriteString(ern.SentAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// EventReminderNotifications is a parsable slice of EventReminderNotification.
type EventReminderNotifications []*EventReminderNotification
