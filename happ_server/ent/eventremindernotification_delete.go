// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"happ/ent/eventremindernotification"
	"happ/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EventReminderNotificationDelete is the builder for deleting a EventReminderNotification entity.
type EventReminderNotificationDelete struct {
	config
	hooks    []Hook
	mutation *EventReminderNotificationMutation
}

// Where appends a list predicates to the EventReminderNotificationDelete builder.
func (ernd *EventReminderNotificationDelete) Where(ps ...predicate.EventReminderNotification) *EventReminderNotificationDelete {
	ernd.mutation.Where(ps...)
	return ernd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ernd *EventReminderNotificationDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, EventReminderNotificationMutation](ctx, ernd.sqlExec, ernd.mutation, ernd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ernd *EventReminderNotificationDelete) ExecX(ctx context.Context) int {
	n, err := ernd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ernd *EventReminderNotificationDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(eventremindernotification.Table, sqlgraph.NewFieldSpec(eventremindernotification.FieldID, field.TypeInt))
	if ps := ernd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ernd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ernd.mutation.done = true
	return affected, err
}

// EventReminderNotificationDeleteOne is the builder for deleting a single EventReminderNotification entity.
type EventReminderNotificationDeleteOne struct {
	ernd *EventReminderNotificationDelete
}

// Where appends a list predicates to the EventReminderNotificationDelete builder.
func (erndo *EventReminderNotificationDeleteOne) Where(ps ...predicate.EventReminderNotification) *EventReminderNotificationDeleteOne {
	erndo.ernd.mutation.Where(ps...)
	return erndo
}

// Exec executes the deletion query.
func (erndo *EventReminderNotificationDeleteOne) Exec(ctx context.Context) error {
	n, err := erndo.ernd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{eventremindernotification.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (erndo *EventReminderNotificationDeleteOne) ExecX(ctx context.Context) {
	if err := erndo.Exec(ctx); err != nil {
		panic(err)
	}
}
