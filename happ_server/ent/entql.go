// Code generated by ent, DO NOT EDIT.

package ent

import (
	"happ/ent/device"
	"happ/ent/event"
	"happ/ent/eventremindernotification"
	"happ/ent/eventuser"
	"happ/ent/follow"
	"happ/ent/predicate"
	"happ/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 6)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   device.Table,
			Columns: device.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: device.FieldID,
			},
		},
		Type: "Device",
		Fields: map[string]*sqlgraph.FieldSpec{
			device.FieldUserID:    {Type: field.TypeInt, Column: device.FieldUserID},
			device.FieldToken:     {Type: field.TypeString, Column: device.FieldToken},
			device.FieldCreatedAt: {Type: field.TypeTime, Column: device.FieldCreatedAt},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   event.Table,
			Columns: event.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: event.FieldID,
			},
		},
		Type: "Event",
		Fields: map[string]*sqlgraph.FieldSpec{
			event.FieldName:           {Type: field.TypeString, Column: event.FieldName},
			event.FieldDescription:    {Type: field.TypeString, Column: event.FieldDescription},
			event.FieldEventPlace:     {Type: field.TypeString, Column: event.FieldEventPlace},
			event.FieldConfirmedCount: {Type: field.TypeInt, Column: event.FieldConfirmedCount},
			event.FieldConfirmedHosts: {Type: field.TypeInt, Column: event.FieldConfirmedHosts},
			event.FieldEventPics:      {Type: field.TypeJSON, Column: event.FieldEventPics},
			event.FieldLightEventPics: {Type: field.TypeJSON, Column: event.FieldLightEventPics},
			event.FieldEventKey:       {Type: field.TypeString, Column: event.FieldEventKey},
			event.FieldEventNonce:     {Type: field.TypeString, Column: event.FieldEventNonce},
			event.FieldEventDate:      {Type: field.TypeTime, Column: event.FieldEventDate},
			event.FieldCoords:         {Type: field.TypeOther, Column: event.FieldCoords},
			event.FieldCreatedAt:      {Type: field.TypeTime, Column: event.FieldCreatedAt},
			event.FieldUpdatedAt:      {Type: field.TypeTime, Column: event.FieldUpdatedAt},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   eventremindernotification.Table,
			Columns: eventremindernotification.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: eventremindernotification.FieldID,
			},
		},
		Type: "EventReminderNotification",
		Fields: map[string]*sqlgraph.FieldSpec{
			eventremindernotification.FieldEventID:  {Type: field.TypeInt, Column: eventremindernotification.FieldEventID},
			eventremindernotification.FieldUserID:   {Type: field.TypeInt, Column: eventremindernotification.FieldUserID},
			eventremindernotification.FieldDaysLeft: {Type: field.TypeInt, Column: eventremindernotification.FieldDaysLeft},
			eventremindernotification.FieldSentAt:   {Type: field.TypeTime, Column: eventremindernotification.FieldSentAt},
		},
	}
	graph.Nodes[3] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   eventuser.Table,
			Columns: eventuser.Columns,
			CompositeID: []*sqlgraph.FieldSpec{
				{
					Type:   field.TypeInt,
					Column: eventuser.FieldEventID,
				},
				{
					Type:   field.TypeInt,
					Column: eventuser.FieldUserID,
				},
			},
		},
		Type: "EventUser",
		Fields: map[string]*sqlgraph.FieldSpec{
			eventuser.FieldEventID:   {Type: field.TypeInt, Column: eventuser.FieldEventID},
			eventuser.FieldUserID:    {Type: field.TypeInt, Column: eventuser.FieldUserID},
			eventuser.FieldInvitedBy: {Type: field.TypeInt, Column: eventuser.FieldInvitedBy},
			eventuser.FieldAdmin:     {Type: field.TypeBool, Column: eventuser.FieldAdmin},
			eventuser.FieldCreator:   {Type: field.TypeBool, Column: eventuser.FieldCreator},
			eventuser.FieldConfirmed: {Type: field.TypeBool, Column: eventuser.FieldConfirmed},
			eventuser.FieldCreatedAt: {Type: field.TypeTime, Column: eventuser.FieldCreatedAt},
		},
	}
	graph.Nodes[4] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   follow.Table,
			Columns: follow.Columns,
			CompositeID: []*sqlgraph.FieldSpec{
				{
					Type:   field.TypeInt,
					Column: follow.FieldUserID,
				},
				{
					Type:   field.TypeInt,
					Column: follow.FieldFollowerID,
				},
			},
		},
		Type: "Follow",
		Fields: map[string]*sqlgraph.FieldSpec{
			follow.FieldUserID:     {Type: field.TypeInt, Column: follow.FieldUserID},
			follow.FieldFollowerID: {Type: field.TypeInt, Column: follow.FieldFollowerID},
			follow.FieldValid:      {Type: field.TypeBool, Column: follow.FieldValid},
			follow.FieldCreatedAt:  {Type: field.TypeTime, Column: follow.FieldCreatedAt},
		},
	}
	graph.Nodes[5] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		},
		Type: "User",
		Fields: map[string]*sqlgraph.FieldSpec{
			user.FieldFUID:       {Type: field.TypeString, Column: user.FieldFUID},
			user.FieldName:       {Type: field.TypeString, Column: user.FieldName},
			user.FieldUsername:   {Type: field.TypeString, Column: user.FieldUsername},
			user.FieldEmail:      {Type: field.TypeString, Column: user.FieldEmail},
			user.FieldProfilePic: {Type: field.TypeString, Column: user.FieldProfilePic},
			user.FieldCreatedAt:  {Type: field.TypeTime, Column: user.FieldCreatedAt},
			user.FieldUpdatedAt:  {Type: field.TypeTime, Column: user.FieldUpdatedAt},
		},
	}
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   device.OwnerTable,
			Columns: []string{device.OwnerColumn},
			Bidi:    false,
		},
		"Device",
		"User",
	)
	graph.MustAddE(
		"users",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   event.UsersTable,
			Columns: event.UsersPrimaryKey,
			Bidi:    false,
		},
		"Event",
		"User",
	)
	graph.MustAddE(
		"event_reminder_notifications",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.EventReminderNotificationsTable,
			Columns: []string{event.EventReminderNotificationsColumn},
			Bidi:    false,
		},
		"Event",
		"EventReminderNotification",
	)
	graph.MustAddE(
		"event_users",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   event.EventUsersTable,
			Columns: []string{event.EventUsersColumn},
			Bidi:    false,
		},
		"Event",
		"EventUser",
	)
	graph.MustAddE(
		"event",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventremindernotification.EventTable,
			Columns: []string{eventremindernotification.EventColumn},
			Bidi:    false,
		},
		"EventReminderNotification",
		"Event",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventremindernotification.UserTable,
			Columns: []string{eventremindernotification.UserColumn},
			Bidi:    false,
		},
		"EventReminderNotification",
		"User",
	)
	graph.MustAddE(
		"event",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   eventuser.EventTable,
			Columns: []string{eventuser.EventColumn},
			Bidi:    false,
		},
		"EventUser",
		"Event",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   eventuser.UserTable,
			Columns: []string{eventuser.UserColumn},
			Bidi:    false,
		},
		"EventUser",
		"User",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   follow.UserTable,
			Columns: []string{follow.UserColumn},
			Bidi:    false,
		},
		"Follow",
		"User",
	)
	graph.MustAddE(
		"follower",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   follow.FollowerTable,
			Columns: []string{follow.FollowerColumn},
			Bidi:    false,
		},
		"Follow",
		"User",
	)
	graph.MustAddE(
		"events",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.EventsTable,
			Columns: user.EventsPrimaryKey,
			Bidi:    false,
		},
		"User",
		"Event",
	)
	graph.MustAddE(
		"followers",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.FollowersTable,
			Columns: user.FollowersPrimaryKey,
			Bidi:    false,
		},
		"User",
		"User",
	)
	graph.MustAddE(
		"following",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.FollowingTable,
			Columns: user.FollowingPrimaryKey,
			Bidi:    false,
		},
		"User",
		"User",
	)
	graph.MustAddE(
		"devices",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DevicesTable,
			Columns: []string{user.DevicesColumn},
			Bidi:    false,
		},
		"User",
		"Device",
	)
	graph.MustAddE(
		"event_reminder_notifications",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.EventReminderNotificationsTable,
			Columns: []string{user.EventReminderNotificationsColumn},
			Bidi:    false,
		},
		"User",
		"EventReminderNotification",
	)
	graph.MustAddE(
		"event_user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.EventUserTable,
			Columns: []string{user.EventUserColumn},
			Bidi:    false,
		},
		"User",
		"EventUser",
	)
	graph.MustAddE(
		"follows",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.FollowsTable,
			Columns: []string{user.FollowsColumn},
			Bidi:    false,
		},
		"User",
		"Follow",
	)
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (dq *DeviceQuery) addPredicate(pred func(s *sql.Selector)) {
	dq.predicates = append(dq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DeviceQuery builder.
func (dq *DeviceQuery) Filter() *DeviceFilter {
	return &DeviceFilter{config: dq.config, predicateAdder: dq}
}

// addPredicate implements the predicateAdder interface.
func (m *DeviceMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DeviceMutation builder.
func (m *DeviceMutation) Filter() *DeviceFilter {
	return &DeviceFilter{config: m.config, predicateAdder: m}
}

// DeviceFilter provides a generic filtering capability at runtime for DeviceQuery.
type DeviceFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DeviceFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *DeviceFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(device.FieldID))
}

// WhereUserID applies the entql int predicate on the user_id field.
func (f *DeviceFilter) WhereUserID(p entql.IntP) {
	f.Where(p.Field(device.FieldUserID))
}

// WhereToken applies the entql string predicate on the token field.
func (f *DeviceFilter) WhereToken(p entql.StringP) {
	f.Where(p.Field(device.FieldToken))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *DeviceFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(device.FieldCreatedAt))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *DeviceFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *DeviceFilter) WhereHasOwnerWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (eq *EventQuery) addPredicate(pred func(s *sql.Selector)) {
	eq.predicates = append(eq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EventQuery builder.
func (eq *EventQuery) Filter() *EventFilter {
	return &EventFilter{config: eq.config, predicateAdder: eq}
}

// addPredicate implements the predicateAdder interface.
func (m *EventMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EventMutation builder.
func (m *EventMutation) Filter() *EventFilter {
	return &EventFilter{config: m.config, predicateAdder: m}
}

// EventFilter provides a generic filtering capability at runtime for EventQuery.
type EventFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *EventFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *EventFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(event.FieldID))
}

// WhereName applies the entql string predicate on the name field.
func (f *EventFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(event.FieldName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *EventFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(event.FieldDescription))
}

// WhereEventPlace applies the entql string predicate on the event_place field.
func (f *EventFilter) WhereEventPlace(p entql.StringP) {
	f.Where(p.Field(event.FieldEventPlace))
}

// WhereConfirmedCount applies the entql int predicate on the confirmed_count field.
func (f *EventFilter) WhereConfirmedCount(p entql.IntP) {
	f.Where(p.Field(event.FieldConfirmedCount))
}

// WhereConfirmedHosts applies the entql int predicate on the confirmed_hosts field.
func (f *EventFilter) WhereConfirmedHosts(p entql.IntP) {
	f.Where(p.Field(event.FieldConfirmedHosts))
}

// WhereEventPics applies the entql json.RawMessage predicate on the event_pics field.
func (f *EventFilter) WhereEventPics(p entql.BytesP) {
	f.Where(p.Field(event.FieldEventPics))
}

// WhereLightEventPics applies the entql json.RawMessage predicate on the light_event_pics field.
func (f *EventFilter) WhereLightEventPics(p entql.BytesP) {
	f.Where(p.Field(event.FieldLightEventPics))
}

// WhereEventKey applies the entql string predicate on the event_key field.
func (f *EventFilter) WhereEventKey(p entql.StringP) {
	f.Where(p.Field(event.FieldEventKey))
}

// WhereEventNonce applies the entql string predicate on the event_nonce field.
func (f *EventFilter) WhereEventNonce(p entql.StringP) {
	f.Where(p.Field(event.FieldEventNonce))
}

// WhereEventDate applies the entql time.Time predicate on the event_date field.
func (f *EventFilter) WhereEventDate(p entql.TimeP) {
	f.Where(p.Field(event.FieldEventDate))
}

// WhereCoords applies the entql other predicate on the coords field.
func (f *EventFilter) WhereCoords(p entql.OtherP) {
	f.Where(p.Field(event.FieldCoords))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *EventFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(event.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *EventFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(event.FieldUpdatedAt))
}

// WhereHasUsers applies a predicate to check if query has an edge users.
func (f *EventFilter) WhereHasUsers() {
	f.Where(entql.HasEdge("users"))
}

// WhereHasUsersWith applies a predicate to check if query has an edge users with a given conditions (other predicates).
func (f *EventFilter) WhereHasUsersWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("users", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEventReminderNotifications applies a predicate to check if query has an edge event_reminder_notifications.
func (f *EventFilter) WhereHasEventReminderNotifications() {
	f.Where(entql.HasEdge("event_reminder_notifications"))
}

// WhereHasEventReminderNotificationsWith applies a predicate to check if query has an edge event_reminder_notifications with a given conditions (other predicates).
func (f *EventFilter) WhereHasEventReminderNotificationsWith(preds ...predicate.EventReminderNotification) {
	f.Where(entql.HasEdgeWith("event_reminder_notifications", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEventUsers applies a predicate to check if query has an edge event_users.
func (f *EventFilter) WhereHasEventUsers() {
	f.Where(entql.HasEdge("event_users"))
}

// WhereHasEventUsersWith applies a predicate to check if query has an edge event_users with a given conditions (other predicates).
func (f *EventFilter) WhereHasEventUsersWith(preds ...predicate.EventUser) {
	f.Where(entql.HasEdgeWith("event_users", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (ernq *EventReminderNotificationQuery) addPredicate(pred func(s *sql.Selector)) {
	ernq.predicates = append(ernq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EventReminderNotificationQuery builder.
func (ernq *EventReminderNotificationQuery) Filter() *EventReminderNotificationFilter {
	return &EventReminderNotificationFilter{config: ernq.config, predicateAdder: ernq}
}

// addPredicate implements the predicateAdder interface.
func (m *EventReminderNotificationMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EventReminderNotificationMutation builder.
func (m *EventReminderNotificationMutation) Filter() *EventReminderNotificationFilter {
	return &EventReminderNotificationFilter{config: m.config, predicateAdder: m}
}

// EventReminderNotificationFilter provides a generic filtering capability at runtime for EventReminderNotificationQuery.
type EventReminderNotificationFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *EventReminderNotificationFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *EventReminderNotificationFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(eventremindernotification.FieldID))
}

// WhereEventID applies the entql int predicate on the event_id field.
func (f *EventReminderNotificationFilter) WhereEventID(p entql.IntP) {
	f.Where(p.Field(eventremindernotification.FieldEventID))
}

// WhereUserID applies the entql int predicate on the user_id field.
func (f *EventReminderNotificationFilter) WhereUserID(p entql.IntP) {
	f.Where(p.Field(eventremindernotification.FieldUserID))
}

// WhereDaysLeft applies the entql int predicate on the days_left field.
func (f *EventReminderNotificationFilter) WhereDaysLeft(p entql.IntP) {
	f.Where(p.Field(eventremindernotification.FieldDaysLeft))
}

// WhereSentAt applies the entql time.Time predicate on the sent_at field.
func (f *EventReminderNotificationFilter) WhereSentAt(p entql.TimeP) {
	f.Where(p.Field(eventremindernotification.FieldSentAt))
}

// WhereHasEvent applies a predicate to check if query has an edge event.
func (f *EventReminderNotificationFilter) WhereHasEvent() {
	f.Where(entql.HasEdge("event"))
}

// WhereHasEventWith applies a predicate to check if query has an edge event with a given conditions (other predicates).
func (f *EventReminderNotificationFilter) WhereHasEventWith(preds ...predicate.Event) {
	f.Where(entql.HasEdgeWith("event", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *EventReminderNotificationFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *EventReminderNotificationFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (euq *EventUserQuery) addPredicate(pred func(s *sql.Selector)) {
	euq.predicates = append(euq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EventUserQuery builder.
func (euq *EventUserQuery) Filter() *EventUserFilter {
	return &EventUserFilter{config: euq.config, predicateAdder: euq}
}

// addPredicate implements the predicateAdder interface.
func (m *EventUserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EventUserMutation builder.
func (m *EventUserMutation) Filter() *EventUserFilter {
	return &EventUserFilter{config: m.config, predicateAdder: m}
}

// EventUserFilter provides a generic filtering capability at runtime for EventUserQuery.
type EventUserFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *EventUserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[3].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereEventID applies the entql int predicate on the event_id field.
func (f *EventUserFilter) WhereEventID(p entql.IntP) {
	f.Where(p.Field(eventuser.FieldEventID))
}

// WhereUserID applies the entql int predicate on the user_id field.
func (f *EventUserFilter) WhereUserID(p entql.IntP) {
	f.Where(p.Field(eventuser.FieldUserID))
}

// WhereInvitedBy applies the entql int predicate on the invited_by field.
func (f *EventUserFilter) WhereInvitedBy(p entql.IntP) {
	f.Where(p.Field(eventuser.FieldInvitedBy))
}

// WhereAdmin applies the entql bool predicate on the admin field.
func (f *EventUserFilter) WhereAdmin(p entql.BoolP) {
	f.Where(p.Field(eventuser.FieldAdmin))
}

// WhereCreator applies the entql bool predicate on the creator field.
func (f *EventUserFilter) WhereCreator(p entql.BoolP) {
	f.Where(p.Field(eventuser.FieldCreator))
}

// WhereConfirmed applies the entql bool predicate on the confirmed field.
func (f *EventUserFilter) WhereConfirmed(p entql.BoolP) {
	f.Where(p.Field(eventuser.FieldConfirmed))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *EventUserFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(eventuser.FieldCreatedAt))
}

// WhereHasEvent applies a predicate to check if query has an edge event.
func (f *EventUserFilter) WhereHasEvent() {
	f.Where(entql.HasEdge("event"))
}

// WhereHasEventWith applies a predicate to check if query has an edge event with a given conditions (other predicates).
func (f *EventUserFilter) WhereHasEventWith(preds ...predicate.Event) {
	f.Where(entql.HasEdgeWith("event", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *EventUserFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *EventUserFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (fq *FollowQuery) addPredicate(pred func(s *sql.Selector)) {
	fq.predicates = append(fq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the FollowQuery builder.
func (fq *FollowQuery) Filter() *FollowFilter {
	return &FollowFilter{config: fq.config, predicateAdder: fq}
}

// addPredicate implements the predicateAdder interface.
func (m *FollowMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the FollowMutation builder.
func (m *FollowMutation) Filter() *FollowFilter {
	return &FollowFilter{config: m.config, predicateAdder: m}
}

// FollowFilter provides a generic filtering capability at runtime for FollowQuery.
type FollowFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *FollowFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[4].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereUserID applies the entql int predicate on the user_id field.
func (f *FollowFilter) WhereUserID(p entql.IntP) {
	f.Where(p.Field(follow.FieldUserID))
}

// WhereFollowerID applies the entql int predicate on the follower_id field.
func (f *FollowFilter) WhereFollowerID(p entql.IntP) {
	f.Where(p.Field(follow.FieldFollowerID))
}

// WhereValid applies the entql bool predicate on the valid field.
func (f *FollowFilter) WhereValid(p entql.BoolP) {
	f.Where(p.Field(follow.FieldValid))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *FollowFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(follow.FieldCreatedAt))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *FollowFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *FollowFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFollower applies a predicate to check if query has an edge follower.
func (f *FollowFilter) WhereHasFollower() {
	f.Where(entql.HasEdge("follower"))
}

// WhereHasFollowerWith applies a predicate to check if query has an edge follower with a given conditions (other predicates).
func (f *FollowFilter) WhereHasFollowerWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("follower", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (uq *UserQuery) addPredicate(pred func(s *sql.Selector)) {
	uq.predicates = append(uq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserQuery builder.
func (uq *UserQuery) Filter() *UserFilter {
	return &UserFilter{config: uq.config, predicateAdder: uq}
}

// addPredicate implements the predicateAdder interface.
func (m *UserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserMutation builder.
func (m *UserMutation) Filter() *UserFilter {
	return &UserFilter{config: m.config, predicateAdder: m}
}

// UserFilter provides a generic filtering capability at runtime for UserQuery.
type UserFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[5].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *UserFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(user.FieldID))
}

// WhereFUID applies the entql string predicate on the FUID field.
func (f *UserFilter) WhereFUID(p entql.StringP) {
	f.Where(p.Field(user.FieldFUID))
}

// WhereName applies the entql string predicate on the name field.
func (f *UserFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(user.FieldName))
}

// WhereUsername applies the entql string predicate on the username field.
func (f *UserFilter) WhereUsername(p entql.StringP) {
	f.Where(p.Field(user.FieldUsername))
}

// WhereEmail applies the entql string predicate on the email field.
func (f *UserFilter) WhereEmail(p entql.StringP) {
	f.Where(p.Field(user.FieldEmail))
}

// WhereProfilePic applies the entql string predicate on the profile_pic field.
func (f *UserFilter) WhereProfilePic(p entql.StringP) {
	f.Where(p.Field(user.FieldProfilePic))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *UserFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *UserFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldUpdatedAt))
}

// WhereHasEvents applies a predicate to check if query has an edge events.
func (f *UserFilter) WhereHasEvents() {
	f.Where(entql.HasEdge("events"))
}

// WhereHasEventsWith applies a predicate to check if query has an edge events with a given conditions (other predicates).
func (f *UserFilter) WhereHasEventsWith(preds ...predicate.Event) {
	f.Where(entql.HasEdgeWith("events", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFollowers applies a predicate to check if query has an edge followers.
func (f *UserFilter) WhereHasFollowers() {
	f.Where(entql.HasEdge("followers"))
}

// WhereHasFollowersWith applies a predicate to check if query has an edge followers with a given conditions (other predicates).
func (f *UserFilter) WhereHasFollowersWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("followers", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFollowing applies a predicate to check if query has an edge following.
func (f *UserFilter) WhereHasFollowing() {
	f.Where(entql.HasEdge("following"))
}

// WhereHasFollowingWith applies a predicate to check if query has an edge following with a given conditions (other predicates).
func (f *UserFilter) WhereHasFollowingWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("following", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDevices applies a predicate to check if query has an edge devices.
func (f *UserFilter) WhereHasDevices() {
	f.Where(entql.HasEdge("devices"))
}

// WhereHasDevicesWith applies a predicate to check if query has an edge devices with a given conditions (other predicates).
func (f *UserFilter) WhereHasDevicesWith(preds ...predicate.Device) {
	f.Where(entql.HasEdgeWith("devices", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEventReminderNotifications applies a predicate to check if query has an edge event_reminder_notifications.
func (f *UserFilter) WhereHasEventReminderNotifications() {
	f.Where(entql.HasEdge("event_reminder_notifications"))
}

// WhereHasEventReminderNotificationsWith applies a predicate to check if query has an edge event_reminder_notifications with a given conditions (other predicates).
func (f *UserFilter) WhereHasEventReminderNotificationsWith(preds ...predicate.EventReminderNotification) {
	f.Where(entql.HasEdgeWith("event_reminder_notifications", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEventUser applies a predicate to check if query has an edge event_user.
func (f *UserFilter) WhereHasEventUser() {
	f.Where(entql.HasEdge("event_user"))
}

// WhereHasEventUserWith applies a predicate to check if query has an edge event_user with a given conditions (other predicates).
func (f *UserFilter) WhereHasEventUserWith(preds ...predicate.EventUser) {
	f.Where(entql.HasEdgeWith("event_user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFollows applies a predicate to check if query has an edge follows.
func (f *UserFilter) WhereHasFollows() {
	f.Where(entql.HasEdge("follows"))
}

// WhereHasFollowsWith applies a predicate to check if query has an edge follows with a given conditions (other predicates).
func (f *UserFilter) WhereHasFollowsWith(preds ...predicate.Follow) {
	f.Where(entql.HasEdgeWith("follows", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}
