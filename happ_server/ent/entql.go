// Code generated by ent, DO NOT EDIT.

package ent

import (
	"happ/ent/follow"
	"happ/ent/friendship"
	"happ/ent/predicate"
	"happ/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 3)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   follow.Table,
			Columns: follow.Columns,
			CompositeID: []*sqlgraph.FieldSpec{
				{
					Type:   field.TypeInt,
					Column: follow.FieldUserID,
				},
				{
					Type:   field.TypeInt,
					Column: follow.FieldFollowerID,
				},
			},
		},
		Type: "Follow",
		Fields: map[string]*sqlgraph.FieldSpec{
			follow.FieldUserID:     {Type: field.TypeInt, Column: follow.FieldUserID},
			follow.FieldFollowerID: {Type: field.TypeInt, Column: follow.FieldFollowerID},
			follow.FieldValid:      {Type: field.TypeBool, Column: follow.FieldValid},
			follow.FieldCreatedAt:  {Type: field.TypeTime, Column: follow.FieldCreatedAt},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   friendship.Table,
			Columns: friendship.Columns,
			CompositeID: []*sqlgraph.FieldSpec{
				{
					Type:   field.TypeInt,
					Column: friendship.FieldUserID,
				},
				{
					Type:   field.TypeInt,
					Column: friendship.FieldFriendID,
				},
			},
		},
		Type: "Friendship",
		Fields: map[string]*sqlgraph.FieldSpec{
			friendship.FieldUserID:         {Type: field.TypeInt, Column: friendship.FieldUserID},
			friendship.FieldFriendID:       {Type: field.TypeInt, Column: friendship.FieldFriendID},
			friendship.FieldUserIDFriend:   {Type: field.TypeBool, Column: friendship.FieldUserIDFriend},
			friendship.FieldFriendIDFriend: {Type: field.TypeBool, Column: friendship.FieldFriendIDFriend},
			friendship.FieldCreatedAt:      {Type: field.TypeTime, Column: friendship.FieldCreatedAt},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		},
		Type: "User",
		Fields: map[string]*sqlgraph.FieldSpec{
			user.FieldName:      {Type: field.TypeString, Column: user.FieldName},
			user.FieldUsername:  {Type: field.TypeString, Column: user.FieldUsername},
			user.FieldEmail:     {Type: field.TypeString, Column: user.FieldEmail},
			user.FieldBirthday:  {Type: field.TypeTime, Column: user.FieldBirthday},
			user.FieldPassword:  {Type: field.TypeString, Column: user.FieldPassword},
			user.FieldCreatedAt: {Type: field.TypeTime, Column: user.FieldCreatedAt},
			user.FieldUpdatedAt: {Type: field.TypeTime, Column: user.FieldUpdatedAt},
		},
	}
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   follow.UserTable,
			Columns: []string{follow.UserColumn},
			Bidi:    false,
		},
		"Follow",
		"User",
	)
	graph.MustAddE(
		"follower",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   follow.FollowerTable,
			Columns: []string{follow.FollowerColumn},
			Bidi:    false,
		},
		"Follow",
		"User",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   friendship.UserTable,
			Columns: []string{friendship.UserColumn},
			Bidi:    false,
		},
		"Friendship",
		"User",
	)
	graph.MustAddE(
		"friend",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   friendship.FriendTable,
			Columns: []string{friendship.FriendColumn},
			Bidi:    false,
		},
		"Friendship",
		"User",
	)
	graph.MustAddE(
		"friends",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.FriendsTable,
			Columns: user.FriendsPrimaryKey,
			Bidi:    true,
		},
		"User",
		"User",
	)
	graph.MustAddE(
		"followers",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.FollowersTable,
			Columns: user.FollowersPrimaryKey,
			Bidi:    false,
		},
		"User",
		"User",
	)
	graph.MustAddE(
		"following",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.FollowingTable,
			Columns: user.FollowingPrimaryKey,
			Bidi:    false,
		},
		"User",
		"User",
	)
	graph.MustAddE(
		"friendships",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.FriendshipsTable,
			Columns: []string{user.FriendshipsColumn},
			Bidi:    false,
		},
		"User",
		"Friendship",
	)
	graph.MustAddE(
		"follow",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.FollowTable,
			Columns: []string{user.FollowColumn},
			Bidi:    false,
		},
		"User",
		"Follow",
	)
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (fq *FollowQuery) addPredicate(pred func(s *sql.Selector)) {
	fq.predicates = append(fq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the FollowQuery builder.
func (fq *FollowQuery) Filter() *FollowFilter {
	return &FollowFilter{config: fq.config, predicateAdder: fq}
}

// addPredicate implements the predicateAdder interface.
func (m *FollowMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the FollowMutation builder.
func (m *FollowMutation) Filter() *FollowFilter {
	return &FollowFilter{config: m.config, predicateAdder: m}
}

// FollowFilter provides a generic filtering capability at runtime for FollowQuery.
type FollowFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *FollowFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereUserID applies the entql int predicate on the user_id field.
func (f *FollowFilter) WhereUserID(p entql.IntP) {
	f.Where(p.Field(follow.FieldUserID))
}

// WhereFollowerID applies the entql int predicate on the follower_id field.
func (f *FollowFilter) WhereFollowerID(p entql.IntP) {
	f.Where(p.Field(follow.FieldFollowerID))
}

// WhereValid applies the entql bool predicate on the valid field.
func (f *FollowFilter) WhereValid(p entql.BoolP) {
	f.Where(p.Field(follow.FieldValid))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *FollowFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(follow.FieldCreatedAt))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *FollowFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *FollowFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFollower applies a predicate to check if query has an edge follower.
func (f *FollowFilter) WhereHasFollower() {
	f.Where(entql.HasEdge("follower"))
}

// WhereHasFollowerWith applies a predicate to check if query has an edge follower with a given conditions (other predicates).
func (f *FollowFilter) WhereHasFollowerWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("follower", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (fq *FriendshipQuery) addPredicate(pred func(s *sql.Selector)) {
	fq.predicates = append(fq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the FriendshipQuery builder.
func (fq *FriendshipQuery) Filter() *FriendshipFilter {
	return &FriendshipFilter{config: fq.config, predicateAdder: fq}
}

// addPredicate implements the predicateAdder interface.
func (m *FriendshipMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the FriendshipMutation builder.
func (m *FriendshipMutation) Filter() *FriendshipFilter {
	return &FriendshipFilter{config: m.config, predicateAdder: m}
}

// FriendshipFilter provides a generic filtering capability at runtime for FriendshipQuery.
type FriendshipFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *FriendshipFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereUserID applies the entql int predicate on the user_id field.
func (f *FriendshipFilter) WhereUserID(p entql.IntP) {
	f.Where(p.Field(friendship.FieldUserID))
}

// WhereFriendID applies the entql int predicate on the friend_id field.
func (f *FriendshipFilter) WhereFriendID(p entql.IntP) {
	f.Where(p.Field(friendship.FieldFriendID))
}

// WhereUserIDFriend applies the entql bool predicate on the user_id_friend field.
func (f *FriendshipFilter) WhereUserIDFriend(p entql.BoolP) {
	f.Where(p.Field(friendship.FieldUserIDFriend))
}

// WhereFriendIDFriend applies the entql bool predicate on the friend_id_friend field.
func (f *FriendshipFilter) WhereFriendIDFriend(p entql.BoolP) {
	f.Where(p.Field(friendship.FieldFriendIDFriend))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *FriendshipFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(friendship.FieldCreatedAt))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *FriendshipFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *FriendshipFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFriend applies a predicate to check if query has an edge friend.
func (f *FriendshipFilter) WhereHasFriend() {
	f.Where(entql.HasEdge("friend"))
}

// WhereHasFriendWith applies a predicate to check if query has an edge friend with a given conditions (other predicates).
func (f *FriendshipFilter) WhereHasFriendWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("friend", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (uq *UserQuery) addPredicate(pred func(s *sql.Selector)) {
	uq.predicates = append(uq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserQuery builder.
func (uq *UserQuery) Filter() *UserFilter {
	return &UserFilter{config: uq.config, predicateAdder: uq}
}

// addPredicate implements the predicateAdder interface.
func (m *UserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserMutation builder.
func (m *UserMutation) Filter() *UserFilter {
	return &UserFilter{config: m.config, predicateAdder: m}
}

// UserFilter provides a generic filtering capability at runtime for UserQuery.
type UserFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *UserFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(user.FieldID))
}

// WhereName applies the entql string predicate on the name field.
func (f *UserFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(user.FieldName))
}

// WhereUsername applies the entql string predicate on the username field.
func (f *UserFilter) WhereUsername(p entql.StringP) {
	f.Where(p.Field(user.FieldUsername))
}

// WhereEmail applies the entql string predicate on the email field.
func (f *UserFilter) WhereEmail(p entql.StringP) {
	f.Where(p.Field(user.FieldEmail))
}

// WhereBirthday applies the entql time.Time predicate on the birthday field.
func (f *UserFilter) WhereBirthday(p entql.TimeP) {
	f.Where(p.Field(user.FieldBirthday))
}

// WherePassword applies the entql string predicate on the password field.
func (f *UserFilter) WherePassword(p entql.StringP) {
	f.Where(p.Field(user.FieldPassword))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *UserFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *UserFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldUpdatedAt))
}

// WhereHasFriends applies a predicate to check if query has an edge friends.
func (f *UserFilter) WhereHasFriends() {
	f.Where(entql.HasEdge("friends"))
}

// WhereHasFriendsWith applies a predicate to check if query has an edge friends with a given conditions (other predicates).
func (f *UserFilter) WhereHasFriendsWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("friends", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFollowers applies a predicate to check if query has an edge followers.
func (f *UserFilter) WhereHasFollowers() {
	f.Where(entql.HasEdge("followers"))
}

// WhereHasFollowersWith applies a predicate to check if query has an edge followers with a given conditions (other predicates).
func (f *UserFilter) WhereHasFollowersWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("followers", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFollowing applies a predicate to check if query has an edge following.
func (f *UserFilter) WhereHasFollowing() {
	f.Where(entql.HasEdge("following"))
}

// WhereHasFollowingWith applies a predicate to check if query has an edge following with a given conditions (other predicates).
func (f *UserFilter) WhereHasFollowingWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("following", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFriendships applies a predicate to check if query has an edge friendships.
func (f *UserFilter) WhereHasFriendships() {
	f.Where(entql.HasEdge("friendships"))
}

// WhereHasFriendshipsWith applies a predicate to check if query has an edge friendships with a given conditions (other predicates).
func (f *UserFilter) WhereHasFriendshipsWith(preds ...predicate.Friendship) {
	f.Where(entql.HasEdgeWith("friendships", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFollow applies a predicate to check if query has an edge follow.
func (f *UserFilter) WhereHasFollow() {
	f.Where(entql.HasEdge("follow"))
}

// WhereHasFollowWith applies a predicate to check if query has an edge follow with a given conditions (other predicates).
func (f *UserFilter) WhereHasFollowWith(preds ...predicate.Follow) {
	f.Where(entql.HasEdgeWith("follow", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}
