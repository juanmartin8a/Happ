// Code generated by ent, DO NOT EDIT.

package event

import (
	"time"
)

const (
	// Label holds the string label denoting the event type in the database.
	Label = "event"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldConfirmedCount holds the string denoting the confirmedcount field in the database.
	FieldConfirmedCount = "confirmed_count"
	// FieldEventPics holds the string denoting the event_pics field in the database.
	FieldEventPics = "event_pics"
	// FieldEventDate holds the string denoting the event_date field in the database.
	FieldEventDate = "event_date"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeUsers holds the string denoting the users edge name in mutations.
	EdgeUsers = "users"
	// EdgeEventUsers holds the string denoting the event_users edge name in mutations.
	EdgeEventUsers = "event_users"
	// Table holds the table name of the event in the database.
	Table = "events"
	// UsersTable is the table that holds the users relation/edge. The primary key declared below.
	UsersTable = "event_users"
	// UsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UsersInverseTable = "users"
	// EventUsersTable is the table that holds the event_users relation/edge.
	EventUsersTable = "event_users"
	// EventUsersInverseTable is the table name for the EventUser entity.
	// It exists in this package in order to avoid circular dependency with the "eventuser" package.
	EventUsersInverseTable = "event_users"
	// EventUsersColumn is the table column denoting the event_users relation/edge.
	EventUsersColumn = "event_id"
)

// Columns holds all SQL columns for event fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
	FieldConfirmedCount,
	FieldEventPics,
	FieldEventDate,
	FieldCreatedAt,
	FieldUpdatedAt,
}

var (
	// UsersPrimaryKey and UsersColumn2 are the table columns denoting the
	// primary key for the users relation (M2M).
	UsersPrimaryKey = []string{"event_id", "user_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
)
