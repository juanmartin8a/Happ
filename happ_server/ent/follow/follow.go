// Code generated by ent, DO NOT EDIT.

package follow

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the follow type in the database.
	Label = "follow"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldFollowerID holds the string denoting the follower_id field in the database.
	FieldFollowerID = "follower_id"
	// FieldValid holds the string denoting the valid field in the database.
	FieldValid = "valid"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeFollower holds the string denoting the follower edge name in mutations.
	EdgeFollower = "follower"
	// UserFieldID holds the string denoting the ID field of the User.
	UserFieldID = "id"
	// Table holds the table name of the follow in the database.
	Table = "follows"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "follows"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// FollowerTable is the table that holds the follower relation/edge.
	FollowerTable = "follows"
	// FollowerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	FollowerInverseTable = "users"
	// FollowerColumn is the table column denoting the follower relation/edge.
	FollowerColumn = "follower_id"
)

// Columns holds all SQL columns for follow fields.
var Columns = []string{
	FieldUserID,
	FieldFollowerID,
	FieldValid,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultValid holds the default value on creation for the "valid" field.
	DefaultValid bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the Follow queries.
type OrderOption func(*sql.Selector)

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByFollowerID orders the results by the follower_id field.
func ByFollowerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFollowerID, opts...).ToFunc()
}

// ByValid orders the results by the valid field.
func ByValid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValid, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByFollowerField orders the results by follower field.
func ByFollowerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFollowerStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, UserColumn),
		sqlgraph.To(UserInverseTable, UserFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
	)
}
func newFollowerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FollowerColumn),
		sqlgraph.To(FollowerInverseTable, UserFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, FollowerTable, FollowerColumn),
	)
}
