// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// DevicesColumns holds the columns for the "devices" table.
	DevicesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "user_id", Type: field.TypeInt},
		{Name: "token", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime, Default: "CURRENT_TIMESTAMP", SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "user_devices", Type: field.TypeInt, Nullable: true},
	}
	// DevicesTable holds the schema information for the "devices" table.
	DevicesTable = &schema.Table{
		Name:       "devices",
		Columns:    DevicesColumns,
		PrimaryKey: []*schema.Column{DevicesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "devices_users_devices",
				Columns:    []*schema.Column{DevicesColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// EventsColumns holds the columns for the "events" table.
	EventsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Size: 255},
		{Name: "description", Type: field.TypeString},
		{Name: "event_place", Type: field.TypeString},
		{Name: "confirmed_count", Type: field.TypeInt, Default: 1},
		{Name: "confirmed_hosts", Type: field.TypeInt, Default: 1},
		{Name: "event_pics", Type: field.TypeJSON},
		{Name: "light_event_pics", Type: field.TypeJSON},
		{Name: "event_key", Type: field.TypeString},
		{Name: "event_nonce", Type: field.TypeString},
		{Name: "event_date", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "coords", Type: field.TypeOther, SchemaType: map[string]string{"mysql": "POINT"}},
		{Name: "created_at", Type: field.TypeTime, Default: "CURRENT_TIMESTAMP", SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "updated_at", Type: field.TypeTime, Default: "CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP", SchemaType: map[string]string{"mysql": "datetime"}},
	}
	// EventsTable holds the schema information for the "events" table.
	EventsTable = &schema.Table{
		Name:       "events",
		Columns:    EventsColumns,
		PrimaryKey: []*schema.Column{EventsColumns[0]},
	}
	// EventReminderNotificationsColumns holds the columns for the "event_reminder_notifications" table.
	EventReminderNotificationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "days_left", Type: field.TypeInt},
		{Name: "sent_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "event_id", Type: field.TypeInt},
		{Name: "user_id", Type: field.TypeInt},
	}
	// EventReminderNotificationsTable holds the schema information for the "event_reminder_notifications" table.
	EventReminderNotificationsTable = &schema.Table{
		Name:       "event_reminder_notifications",
		Columns:    EventReminderNotificationsColumns,
		PrimaryKey: []*schema.Column{EventReminderNotificationsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "event_reminder_notifications_events_event_reminder_notifications",
				Columns:    []*schema.Column{EventReminderNotificationsColumns[3]},
				RefColumns: []*schema.Column{EventsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "event_reminder_notifications_users_event_reminder_notifications",
				Columns:    []*schema.Column{EventReminderNotificationsColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "eventremindernotification_event_id_user_id",
				Unique:  true,
				Columns: []*schema.Column{EventReminderNotificationsColumns[3], EventReminderNotificationsColumns[4]},
			},
		},
	}
	// EventUsersColumns holds the columns for the "event_users" table.
	EventUsersColumns = []*schema.Column{
		{Name: "invited_by", Type: field.TypeInt},
		{Name: "admin", Type: field.TypeBool, Default: false},
		{Name: "creator", Type: field.TypeBool, Default: false},
		{Name: "confirmed", Type: field.TypeBool, Default: false},
		{Name: "created_at", Type: field.TypeTime, Default: "CURRENT_TIMESTAMP", SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "event_id", Type: field.TypeInt},
		{Name: "user_id", Type: field.TypeInt},
	}
	// EventUsersTable holds the schema information for the "event_users" table.
	EventUsersTable = &schema.Table{
		Name:       "event_users",
		Columns:    EventUsersColumns,
		PrimaryKey: []*schema.Column{EventUsersColumns[5], EventUsersColumns[6]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "event_users_events_event",
				Columns:    []*schema.Column{EventUsersColumns[5]},
				RefColumns: []*schema.Column{EventsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "event_users_users_user",
				Columns:    []*schema.Column{EventUsersColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// FollowsColumns holds the columns for the "follows" table.
	FollowsColumns = []*schema.Column{
		{Name: "valid", Type: field.TypeBool, Default: true},
		{Name: "created_at", Type: field.TypeTime, Default: "CURRENT_TIMESTAMP", SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "user_id", Type: field.TypeInt},
		{Name: "follower_id", Type: field.TypeInt},
	}
	// FollowsTable holds the schema information for the "follows" table.
	FollowsTable = &schema.Table{
		Name:       "follows",
		Columns:    FollowsColumns,
		PrimaryKey: []*schema.Column{FollowsColumns[2], FollowsColumns[3]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "follows_users_user",
				Columns:    []*schema.Column{FollowsColumns[2]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "follows_users_follower",
				Columns:    []*schema.Column{FollowsColumns[3]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "fuid", Type: field.TypeString, Unique: true},
		{Name: "name", Type: field.TypeString, Size: 255},
		{Name: "username", Type: field.TypeString, Unique: true, Size: 255},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "profile_pic", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime, Default: "CURRENT_TIMESTAMP", SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "updated_at", Type: field.TypeTime, Default: "CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP", SchemaType: map[string]string{"mysql": "datetime"}},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		DevicesTable,
		EventsTable,
		EventReminderNotificationsTable,
		EventUsersTable,
		FollowsTable,
		UsersTable,
	}
)

func init() {
	DevicesTable.ForeignKeys[0].RefTable = UsersTable
	EventReminderNotificationsTable.ForeignKeys[0].RefTable = EventsTable
	EventReminderNotificationsTable.ForeignKeys[1].RefTable = UsersTable
	EventUsersTable.ForeignKeys[0].RefTable = EventsTable
	EventUsersTable.ForeignKeys[1].RefTable = UsersTable
	FollowsTable.ForeignKeys[0].RefTable = UsersTable
	FollowsTable.ForeignKeys[1].RefTable = UsersTable
}
