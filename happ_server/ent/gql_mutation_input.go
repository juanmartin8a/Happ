// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"
)

// CreateEventInput represents a mutation input for creating events.
type CreateEventInput struct {
	Name           string
	Description    string
	ConfirmedCount int
	EventPics      []string
	EventDate      time.Time
	CreatedAt      *time.Time
	UpdatedAt      *time.Time
	UserIDs        []int
}

// Mutate applies the CreateEventInput on the EventMutation builder.
func (i *CreateEventInput) Mutate(m *EventMutation) {
	m.SetName(i.Name)
	m.SetDescription(i.Description)
	m.SetConfirmedCount(i.ConfirmedCount)
	m.SetEventPics(i.EventPics)
	m.SetEventDate(i.EventDate)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UserIDs; len(v) > 0 {
		m.AddUserIDs(v...)
	}
}

// SetInput applies the change-set in the CreateEventInput on the EventCreate builder.
func (c *EventCreate) SetInput(i CreateEventInput) *EventCreate {
	i.Mutate(c.Mutation())
	return c
}

// CreateEventUserInput represents a mutation input for creating eventusers.
type CreateEventUserInput struct {
	Admin     *bool
	CreatedAt *time.Time
	EventID   int
	UserID    int
}

// Mutate applies the CreateEventUserInput on the EventUserMutation builder.
func (i *CreateEventUserInput) Mutate(m *EventUserMutation) {
	if v := i.Admin; v != nil {
		m.SetAdmin(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	m.SetEventID(i.EventID)
	m.SetUserID(i.UserID)
}

// SetInput applies the change-set in the CreateEventUserInput on the EventUserCreate builder.
func (c *EventUserCreate) SetInput(i CreateEventUserInput) *EventUserCreate {
	i.Mutate(c.Mutation())
	return c
}

// CreateFollowInput represents a mutation input for creating follows.
type CreateFollowInput struct {
	Valid      *bool
	CreatedAt  *time.Time
	UserID     int
	FollowerID int
}

// Mutate applies the CreateFollowInput on the FollowMutation builder.
func (i *CreateFollowInput) Mutate(m *FollowMutation) {
	if v := i.Valid; v != nil {
		m.SetValid(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	m.SetUserID(i.UserID)
	m.SetFollowerID(i.FollowerID)
}

// SetInput applies the change-set in the CreateFollowInput on the FollowCreate builder.
func (c *FollowCreate) SetInput(i CreateFollowInput) *FollowCreate {
	i.Mutate(c.Mutation())
	return c
}

// CreateFriendshipInput represents a mutation input for creating friendships.
type CreateFriendshipInput struct {
	UserIDFriend   bool
	FriendIDFriend bool
	CreatedAt      *time.Time
	UserID         int
	FriendID       int
}

// Mutate applies the CreateFriendshipInput on the FriendshipMutation builder.
func (i *CreateFriendshipInput) Mutate(m *FriendshipMutation) {
	m.SetUserIDFriend(i.UserIDFriend)
	m.SetFriendIDFriend(i.FriendIDFriend)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	m.SetUserID(i.UserID)
	m.SetFriendID(i.FriendID)
}

// SetInput applies the change-set in the CreateFriendshipInput on the FriendshipCreate builder.
func (c *FriendshipCreate) SetInput(i CreateFriendshipInput) *FriendshipCreate {
	i.Mutate(c.Mutation())
	return c
}

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	Name         string
	Username     string
	Email        string
	ProfilePic   string
	Birthday     time.Time
	Password     string
	CreatedAt    *time.Time
	UpdatedAt    *time.Time
	EventIDs     []int
	FriendIDs    []int
	FollowerIDs  []int
	FollowingIDs []int
}

// Mutate applies the CreateUserInput on the UserMutation builder.
func (i *CreateUserInput) Mutate(m *UserMutation) {
	m.SetName(i.Name)
	m.SetUsername(i.Username)
	m.SetEmail(i.Email)
	m.SetProfilePic(i.ProfilePic)
	m.SetBirthday(i.Birthday)
	m.SetPassword(i.Password)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.EventIDs; len(v) > 0 {
		m.AddEventIDs(v...)
	}
	if v := i.FriendIDs; len(v) > 0 {
		m.AddFriendIDs(v...)
	}
	if v := i.FollowerIDs; len(v) > 0 {
		m.AddFollowerIDs(v...)
	}
	if v := i.FollowingIDs; len(v) > 0 {
		m.AddFollowingIDs(v...)
	}
}

// SetInput applies the change-set in the CreateUserInput on the UserCreate builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c.Mutation())
	return c
}
