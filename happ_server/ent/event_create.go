// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"happ/ent/event"
	"happ/ent/eventremindernotification"
	"happ/ent/schema/schematype"
	"happ/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EventCreate is the builder for creating a Event entity.
type EventCreate struct {
	config
	mutation *EventMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (ec *EventCreate) SetName(s string) *EventCreate {
	ec.mutation.SetName(s)
	return ec
}

// SetDescription sets the "description" field.
func (ec *EventCreate) SetDescription(s string) *EventCreate {
	ec.mutation.SetDescription(s)
	return ec
}

// SetEventPlace sets the "event_place" field.
func (ec *EventCreate) SetEventPlace(s string) *EventCreate {
	ec.mutation.SetEventPlace(s)
	return ec
}

// SetConfirmedCount sets the "confirmed_count" field.
func (ec *EventCreate) SetConfirmedCount(i int) *EventCreate {
	ec.mutation.SetConfirmedCount(i)
	return ec
}

// SetNillableConfirmedCount sets the "confirmed_count" field if the given value is not nil.
func (ec *EventCreate) SetNillableConfirmedCount(i *int) *EventCreate {
	if i != nil {
		ec.SetConfirmedCount(*i)
	}
	return ec
}

// SetConfirmedHosts sets the "confirmed_hosts" field.
func (ec *EventCreate) SetConfirmedHosts(i int) *EventCreate {
	ec.mutation.SetConfirmedHosts(i)
	return ec
}

// SetNillableConfirmedHosts sets the "confirmed_hosts" field if the given value is not nil.
func (ec *EventCreate) SetNillableConfirmedHosts(i *int) *EventCreate {
	if i != nil {
		ec.SetConfirmedHosts(*i)
	}
	return ec
}

// SetEventPics sets the "event_pics" field.
func (ec *EventCreate) SetEventPics(s []string) *EventCreate {
	ec.mutation.SetEventPics(s)
	return ec
}

// SetLightEventPics sets the "light_event_pics" field.
func (ec *EventCreate) SetLightEventPics(s []string) *EventCreate {
	ec.mutation.SetLightEventPics(s)
	return ec
}

// SetEventKey sets the "event_key" field.
func (ec *EventCreate) SetEventKey(s string) *EventCreate {
	ec.mutation.SetEventKey(s)
	return ec
}

// SetEventNonce sets the "event_nonce" field.
func (ec *EventCreate) SetEventNonce(s string) *EventCreate {
	ec.mutation.SetEventNonce(s)
	return ec
}

// SetEventDate sets the "event_date" field.
func (ec *EventCreate) SetEventDate(t time.Time) *EventCreate {
	ec.mutation.SetEventDate(t)
	return ec
}

// SetCoords sets the "coords" field.
func (ec *EventCreate) SetCoords(s *schematype.Point) *EventCreate {
	ec.mutation.SetCoords(s)
	return ec
}

// SetCreatedAt sets the "created_at" field.
func (ec *EventCreate) SetCreatedAt(t time.Time) *EventCreate {
	ec.mutation.SetCreatedAt(t)
	return ec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ec *EventCreate) SetNillableCreatedAt(t *time.Time) *EventCreate {
	if t != nil {
		ec.SetCreatedAt(*t)
	}
	return ec
}

// SetUpdatedAt sets the "updated_at" field.
func (ec *EventCreate) SetUpdatedAt(t time.Time) *EventCreate {
	ec.mutation.SetUpdatedAt(t)
	return ec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ec *EventCreate) SetNillableUpdatedAt(t *time.Time) *EventCreate {
	if t != nil {
		ec.SetUpdatedAt(*t)
	}
	return ec
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (ec *EventCreate) AddUserIDs(ids ...int) *EventCreate {
	ec.mutation.AddUserIDs(ids...)
	return ec
}

// AddUsers adds the "users" edges to the User entity.
func (ec *EventCreate) AddUsers(u ...*User) *EventCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ec.AddUserIDs(ids...)
}

// AddEventReminderNotificationIDs adds the "event_reminder_notifications" edge to the EventReminderNotification entity by IDs.
func (ec *EventCreate) AddEventReminderNotificationIDs(ids ...int) *EventCreate {
	ec.mutation.AddEventReminderNotificationIDs(ids...)
	return ec
}

// AddEventReminderNotifications adds the "event_reminder_notifications" edges to the EventReminderNotification entity.
func (ec *EventCreate) AddEventReminderNotifications(e ...*EventReminderNotification) *EventCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ec.AddEventReminderNotificationIDs(ids...)
}

// Mutation returns the EventMutation object of the builder.
func (ec *EventCreate) Mutation() *EventMutation {
	return ec.mutation
}

// Save creates the Event in the database.
func (ec *EventCreate) Save(ctx context.Context) (*Event, error) {
	ec.defaults()
	return withHooks[*Event, EventMutation](ctx, ec.sqlSave, ec.mutation, ec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EventCreate) SaveX(ctx context.Context) *Event {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *EventCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *EventCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ec *EventCreate) defaults() {
	if _, ok := ec.mutation.ConfirmedCount(); !ok {
		v := event.DefaultConfirmedCount
		ec.mutation.SetConfirmedCount(v)
	}
	if _, ok := ec.mutation.ConfirmedHosts(); !ok {
		v := event.DefaultConfirmedHosts
		ec.mutation.SetConfirmedHosts(v)
	}
	if _, ok := ec.mutation.CreatedAt(); !ok {
		v := event.DefaultCreatedAt()
		ec.mutation.SetCreatedAt(v)
	}
	if _, ok := ec.mutation.UpdatedAt(); !ok {
		v := event.DefaultUpdatedAt()
		ec.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *EventCreate) check() error {
	if _, ok := ec.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Event.name"`)}
	}
	if v, ok := ec.mutation.Name(); ok {
		if err := event.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Event.name": %w`, err)}
		}
	}
	if _, ok := ec.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Event.description"`)}
	}
	if v, ok := ec.mutation.Description(); ok {
		if err := event.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Event.description": %w`, err)}
		}
	}
	if _, ok := ec.mutation.EventPlace(); !ok {
		return &ValidationError{Name: "event_place", err: errors.New(`ent: missing required field "Event.event_place"`)}
	}
	if v, ok := ec.mutation.EventPlace(); ok {
		if err := event.EventPlaceValidator(v); err != nil {
			return &ValidationError{Name: "event_place", err: fmt.Errorf(`ent: validator failed for field "Event.event_place": %w`, err)}
		}
	}
	if _, ok := ec.mutation.ConfirmedCount(); !ok {
		return &ValidationError{Name: "confirmed_count", err: errors.New(`ent: missing required field "Event.confirmed_count"`)}
	}
	if _, ok := ec.mutation.ConfirmedHosts(); !ok {
		return &ValidationError{Name: "confirmed_hosts", err: errors.New(`ent: missing required field "Event.confirmed_hosts"`)}
	}
	if _, ok := ec.mutation.EventPics(); !ok {
		return &ValidationError{Name: "event_pics", err: errors.New(`ent: missing required field "Event.event_pics"`)}
	}
	if _, ok := ec.mutation.LightEventPics(); !ok {
		return &ValidationError{Name: "light_event_pics", err: errors.New(`ent: missing required field "Event.light_event_pics"`)}
	}
	if _, ok := ec.mutation.EventKey(); !ok {
		return &ValidationError{Name: "event_key", err: errors.New(`ent: missing required field "Event.event_key"`)}
	}
	if v, ok := ec.mutation.EventKey(); ok {
		if err := event.EventKeyValidator(v); err != nil {
			return &ValidationError{Name: "event_key", err: fmt.Errorf(`ent: validator failed for field "Event.event_key": %w`, err)}
		}
	}
	if _, ok := ec.mutation.EventNonce(); !ok {
		return &ValidationError{Name: "event_nonce", err: errors.New(`ent: missing required field "Event.event_nonce"`)}
	}
	if v, ok := ec.mutation.EventNonce(); ok {
		if err := event.EventNonceValidator(v); err != nil {
			return &ValidationError{Name: "event_nonce", err: fmt.Errorf(`ent: validator failed for field "Event.event_nonce": %w`, err)}
		}
	}
	if _, ok := ec.mutation.EventDate(); !ok {
		return &ValidationError{Name: "event_date", err: errors.New(`ent: missing required field "Event.event_date"`)}
	}
	if _, ok := ec.mutation.Coords(); !ok {
		return &ValidationError{Name: "coords", err: errors.New(`ent: missing required field "Event.coords"`)}
	}
	if _, ok := ec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Event.created_at"`)}
	}
	if _, ok := ec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Event.updated_at"`)}
	}
	return nil
}

func (ec *EventCreate) sqlSave(ctx context.Context) (*Event, error) {
	if err := ec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ec.mutation.id = &_node.ID
	ec.mutation.done = true
	return _node, nil
}

func (ec *EventCreate) createSpec() (*Event, *sqlgraph.CreateSpec) {
	var (
		_node = &Event{config: ec.config}
		_spec = sqlgraph.NewCreateSpec(event.Table, sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt))
	)
	_spec.OnConflict = ec.conflict
	if value, ok := ec.mutation.Name(); ok {
		_spec.SetField(event.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ec.mutation.Description(); ok {
		_spec.SetField(event.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := ec.mutation.EventPlace(); ok {
		_spec.SetField(event.FieldEventPlace, field.TypeString, value)
		_node.EventPlace = value
	}
	if value, ok := ec.mutation.ConfirmedCount(); ok {
		_spec.SetField(event.FieldConfirmedCount, field.TypeInt, value)
		_node.ConfirmedCount = value
	}
	if value, ok := ec.mutation.ConfirmedHosts(); ok {
		_spec.SetField(event.FieldConfirmedHosts, field.TypeInt, value)
		_node.ConfirmedHosts = value
	}
	if value, ok := ec.mutation.EventPics(); ok {
		_spec.SetField(event.FieldEventPics, field.TypeJSON, value)
		_node.EventPics = value
	}
	if value, ok := ec.mutation.LightEventPics(); ok {
		_spec.SetField(event.FieldLightEventPics, field.TypeJSON, value)
		_node.LightEventPics = value
	}
	if value, ok := ec.mutation.EventKey(); ok {
		_spec.SetField(event.FieldEventKey, field.TypeString, value)
		_node.EventKey = value
	}
	if value, ok := ec.mutation.EventNonce(); ok {
		_spec.SetField(event.FieldEventNonce, field.TypeString, value)
		_node.EventNonce = value
	}
	if value, ok := ec.mutation.EventDate(); ok {
		_spec.SetField(event.FieldEventDate, field.TypeTime, value)
		_node.EventDate = value
	}
	if value, ok := ec.mutation.Coords(); ok {
		_spec.SetField(event.FieldCoords, field.TypeOther, value)
		_node.Coords = value
	}
	if value, ok := ec.mutation.CreatedAt(); ok {
		_spec.SetField(event.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ec.mutation.UpdatedAt(); ok {
		_spec.SetField(event.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := ec.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   event.UsersTable,
			Columns: event.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &EventUserCreate{config: ec.config, mutation: newEventUserMutation(ec.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.EventReminderNotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.EventReminderNotificationsTable,
			Columns: []string{event.EventReminderNotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventremindernotification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Event.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EventUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
//
func (ec *EventCreate) OnConflict(opts ...sql.ConflictOption) *EventUpsertOne {
	ec.conflict = opts
	return &EventUpsertOne{
		create: ec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Event.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ec *EventCreate) OnConflictColumns(columns ...string) *EventUpsertOne {
	ec.conflict = append(ec.conflict, sql.ConflictColumns(columns...))
	return &EventUpsertOne{
		create: ec,
	}
}

type (
	// EventUpsertOne is the builder for "upsert"-ing
	//  one Event node.
	EventUpsertOne struct {
		create *EventCreate
	}

	// EventUpsert is the "OnConflict" setter.
	EventUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *EventUpsert) SetName(v string) *EventUpsert {
	u.Set(event.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *EventUpsert) UpdateName() *EventUpsert {
	u.SetExcluded(event.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *EventUpsert) SetDescription(v string) *EventUpsert {
	u.Set(event.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *EventUpsert) UpdateDescription() *EventUpsert {
	u.SetExcluded(event.FieldDescription)
	return u
}

// SetEventPlace sets the "event_place" field.
func (u *EventUpsert) SetEventPlace(v string) *EventUpsert {
	u.Set(event.FieldEventPlace, v)
	return u
}

// UpdateEventPlace sets the "event_place" field to the value that was provided on create.
func (u *EventUpsert) UpdateEventPlace() *EventUpsert {
	u.SetExcluded(event.FieldEventPlace)
	return u
}

// SetConfirmedCount sets the "confirmed_count" field.
func (u *EventUpsert) SetConfirmedCount(v int) *EventUpsert {
	u.Set(event.FieldConfirmedCount, v)
	return u
}

// UpdateConfirmedCount sets the "confirmed_count" field to the value that was provided on create.
func (u *EventUpsert) UpdateConfirmedCount() *EventUpsert {
	u.SetExcluded(event.FieldConfirmedCount)
	return u
}

// AddConfirmedCount adds v to the "confirmed_count" field.
func (u *EventUpsert) AddConfirmedCount(v int) *EventUpsert {
	u.Add(event.FieldConfirmedCount, v)
	return u
}

// SetConfirmedHosts sets the "confirmed_hosts" field.
func (u *EventUpsert) SetConfirmedHosts(v int) *EventUpsert {
	u.Set(event.FieldConfirmedHosts, v)
	return u
}

// UpdateConfirmedHosts sets the "confirmed_hosts" field to the value that was provided on create.
func (u *EventUpsert) UpdateConfirmedHosts() *EventUpsert {
	u.SetExcluded(event.FieldConfirmedHosts)
	return u
}

// AddConfirmedHosts adds v to the "confirmed_hosts" field.
func (u *EventUpsert) AddConfirmedHosts(v int) *EventUpsert {
	u.Add(event.FieldConfirmedHosts, v)
	return u
}

// SetEventPics sets the "event_pics" field.
func (u *EventUpsert) SetEventPics(v []string) *EventUpsert {
	u.Set(event.FieldEventPics, v)
	return u
}

// UpdateEventPics sets the "event_pics" field to the value that was provided on create.
func (u *EventUpsert) UpdateEventPics() *EventUpsert {
	u.SetExcluded(event.FieldEventPics)
	return u
}

// SetLightEventPics sets the "light_event_pics" field.
func (u *EventUpsert) SetLightEventPics(v []string) *EventUpsert {
	u.Set(event.FieldLightEventPics, v)
	return u
}

// UpdateLightEventPics sets the "light_event_pics" field to the value that was provided on create.
func (u *EventUpsert) UpdateLightEventPics() *EventUpsert {
	u.SetExcluded(event.FieldLightEventPics)
	return u
}

// SetEventKey sets the "event_key" field.
func (u *EventUpsert) SetEventKey(v string) *EventUpsert {
	u.Set(event.FieldEventKey, v)
	return u
}

// UpdateEventKey sets the "event_key" field to the value that was provided on create.
func (u *EventUpsert) UpdateEventKey() *EventUpsert {
	u.SetExcluded(event.FieldEventKey)
	return u
}

// SetEventNonce sets the "event_nonce" field.
func (u *EventUpsert) SetEventNonce(v string) *EventUpsert {
	u.Set(event.FieldEventNonce, v)
	return u
}

// UpdateEventNonce sets the "event_nonce" field to the value that was provided on create.
func (u *EventUpsert) UpdateEventNonce() *EventUpsert {
	u.SetExcluded(event.FieldEventNonce)
	return u
}

// SetEventDate sets the "event_date" field.
func (u *EventUpsert) SetEventDate(v time.Time) *EventUpsert {
	u.Set(event.FieldEventDate, v)
	return u
}

// UpdateEventDate sets the "event_date" field to the value that was provided on create.
func (u *EventUpsert) UpdateEventDate() *EventUpsert {
	u.SetExcluded(event.FieldEventDate)
	return u
}

// SetCoords sets the "coords" field.
func (u *EventUpsert) SetCoords(v *schematype.Point) *EventUpsert {
	u.Set(event.FieldCoords, v)
	return u
}

// UpdateCoords sets the "coords" field to the value that was provided on create.
func (u *EventUpsert) UpdateCoords() *EventUpsert {
	u.SetExcluded(event.FieldCoords)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Event.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *EventUpsertOne) UpdateNewValues() *EventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(event.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.UpdatedAt(); exists {
			s.SetIgnore(event.FieldUpdatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Event.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *EventUpsertOne) Ignore() *EventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EventUpsertOne) DoNothing() *EventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EventCreate.OnConflict
// documentation for more info.
func (u *EventUpsertOne) Update(set func(*EventUpsert)) *EventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EventUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *EventUpsertOne) SetName(v string) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateName() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *EventUpsertOne) SetDescription(v string) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateDescription() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateDescription()
	})
}

// SetEventPlace sets the "event_place" field.
func (u *EventUpsertOne) SetEventPlace(v string) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetEventPlace(v)
	})
}

// UpdateEventPlace sets the "event_place" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateEventPlace() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateEventPlace()
	})
}

// SetConfirmedCount sets the "confirmed_count" field.
func (u *EventUpsertOne) SetConfirmedCount(v int) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetConfirmedCount(v)
	})
}

// AddConfirmedCount adds v to the "confirmed_count" field.
func (u *EventUpsertOne) AddConfirmedCount(v int) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.AddConfirmedCount(v)
	})
}

// UpdateConfirmedCount sets the "confirmed_count" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateConfirmedCount() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateConfirmedCount()
	})
}

// SetConfirmedHosts sets the "confirmed_hosts" field.
func (u *EventUpsertOne) SetConfirmedHosts(v int) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetConfirmedHosts(v)
	})
}

// AddConfirmedHosts adds v to the "confirmed_hosts" field.
func (u *EventUpsertOne) AddConfirmedHosts(v int) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.AddConfirmedHosts(v)
	})
}

// UpdateConfirmedHosts sets the "confirmed_hosts" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateConfirmedHosts() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateConfirmedHosts()
	})
}

// SetEventPics sets the "event_pics" field.
func (u *EventUpsertOne) SetEventPics(v []string) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetEventPics(v)
	})
}

// UpdateEventPics sets the "event_pics" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateEventPics() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateEventPics()
	})
}

// SetLightEventPics sets the "light_event_pics" field.
func (u *EventUpsertOne) SetLightEventPics(v []string) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetLightEventPics(v)
	})
}

// UpdateLightEventPics sets the "light_event_pics" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateLightEventPics() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateLightEventPics()
	})
}

// SetEventKey sets the "event_key" field.
func (u *EventUpsertOne) SetEventKey(v string) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetEventKey(v)
	})
}

// UpdateEventKey sets the "event_key" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateEventKey() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateEventKey()
	})
}

// SetEventNonce sets the "event_nonce" field.
func (u *EventUpsertOne) SetEventNonce(v string) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetEventNonce(v)
	})
}

// UpdateEventNonce sets the "event_nonce" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateEventNonce() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateEventNonce()
	})
}

// SetEventDate sets the "event_date" field.
func (u *EventUpsertOne) SetEventDate(v time.Time) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetEventDate(v)
	})
}

// UpdateEventDate sets the "event_date" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateEventDate() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateEventDate()
	})
}

// SetCoords sets the "coords" field.
func (u *EventUpsertOne) SetCoords(v *schematype.Point) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetCoords(v)
	})
}

// UpdateCoords sets the "coords" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateCoords() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateCoords()
	})
}

// Exec executes the query.
func (u *EventUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EventCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EventUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *EventUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *EventUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// EventCreateBulk is the builder for creating many Event entities in bulk.
type EventCreateBulk struct {
	config
	builders []*EventCreate
	conflict []sql.ConflictOption
}

// Save creates the Event entities in the database.
func (ecb *EventCreateBulk) Save(ctx context.Context) ([]*Event, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Event, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EventMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ecb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *EventCreateBulk) SaveX(ctx context.Context) []*Event {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *EventCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *EventCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Event.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EventUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
//
func (ecb *EventCreateBulk) OnConflict(opts ...sql.ConflictOption) *EventUpsertBulk {
	ecb.conflict = opts
	return &EventUpsertBulk{
		create: ecb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Event.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ecb *EventCreateBulk) OnConflictColumns(columns ...string) *EventUpsertBulk {
	ecb.conflict = append(ecb.conflict, sql.ConflictColumns(columns...))
	return &EventUpsertBulk{
		create: ecb,
	}
}

// EventUpsertBulk is the builder for "upsert"-ing
// a bulk of Event nodes.
type EventUpsertBulk struct {
	create *EventCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Event.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *EventUpsertBulk) UpdateNewValues() *EventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(event.FieldCreatedAt)
			}
			if _, exists := b.mutation.UpdatedAt(); exists {
				s.SetIgnore(event.FieldUpdatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Event.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *EventUpsertBulk) Ignore() *EventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EventUpsertBulk) DoNothing() *EventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EventCreateBulk.OnConflict
// documentation for more info.
func (u *EventUpsertBulk) Update(set func(*EventUpsert)) *EventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EventUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *EventUpsertBulk) SetName(v string) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateName() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *EventUpsertBulk) SetDescription(v string) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateDescription() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateDescription()
	})
}

// SetEventPlace sets the "event_place" field.
func (u *EventUpsertBulk) SetEventPlace(v string) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetEventPlace(v)
	})
}

// UpdateEventPlace sets the "event_place" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateEventPlace() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateEventPlace()
	})
}

// SetConfirmedCount sets the "confirmed_count" field.
func (u *EventUpsertBulk) SetConfirmedCount(v int) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetConfirmedCount(v)
	})
}

// AddConfirmedCount adds v to the "confirmed_count" field.
func (u *EventUpsertBulk) AddConfirmedCount(v int) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.AddConfirmedCount(v)
	})
}

// UpdateConfirmedCount sets the "confirmed_count" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateConfirmedCount() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateConfirmedCount()
	})
}

// SetConfirmedHosts sets the "confirmed_hosts" field.
func (u *EventUpsertBulk) SetConfirmedHosts(v int) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetConfirmedHosts(v)
	})
}

// AddConfirmedHosts adds v to the "confirmed_hosts" field.
func (u *EventUpsertBulk) AddConfirmedHosts(v int) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.AddConfirmedHosts(v)
	})
}

// UpdateConfirmedHosts sets the "confirmed_hosts" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateConfirmedHosts() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateConfirmedHosts()
	})
}

// SetEventPics sets the "event_pics" field.
func (u *EventUpsertBulk) SetEventPics(v []string) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetEventPics(v)
	})
}

// UpdateEventPics sets the "event_pics" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateEventPics() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateEventPics()
	})
}

// SetLightEventPics sets the "light_event_pics" field.
func (u *EventUpsertBulk) SetLightEventPics(v []string) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetLightEventPics(v)
	})
}

// UpdateLightEventPics sets the "light_event_pics" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateLightEventPics() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateLightEventPics()
	})
}

// SetEventKey sets the "event_key" field.
func (u *EventUpsertBulk) SetEventKey(v string) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetEventKey(v)
	})
}

// UpdateEventKey sets the "event_key" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateEventKey() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateEventKey()
	})
}

// SetEventNonce sets the "event_nonce" field.
func (u *EventUpsertBulk) SetEventNonce(v string) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetEventNonce(v)
	})
}

// UpdateEventNonce sets the "event_nonce" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateEventNonce() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateEventNonce()
	})
}

// SetEventDate sets the "event_date" field.
func (u *EventUpsertBulk) SetEventDate(v time.Time) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetEventDate(v)
	})
}

// UpdateEventDate sets the "event_date" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateEventDate() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateEventDate()
	})
}

// SetCoords sets the "coords" field.
func (u *EventUpsertBulk) SetCoords(v *schematype.Point) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetCoords(v)
	})
}

// UpdateCoords sets the "coords" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateCoords() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateCoords()
	})
}

// Exec executes the query.
func (u *EventUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the EventCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EventCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EventUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
