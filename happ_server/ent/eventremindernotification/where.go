// Code generated by ent, DO NOT EDIT.

package eventremindernotification

import (
	"happ/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.EventReminderNotification {
	return predicate.EventReminderNotification(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.EventReminderNotification {
	return predicate.EventReminderNotification(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.EventReminderNotification {
	return predicate.EventReminderNotification(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.EventReminderNotification {
	return predicate.EventReminderNotification(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.EventReminderNotification {
	return predicate.EventReminderNotification(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.EventReminderNotification {
	return predicate.EventReminderNotification(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.EventReminderNotification {
	return predicate.EventReminderNotification(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.EventReminderNotification {
	return predicate.EventReminderNotification(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.EventReminderNotification {
	return predicate.EventReminderNotification(sql.FieldLTE(FieldID, id))
}

// EventID applies equality check predicate on the "event_id" field. It's identical to EventIDEQ.
func EventID(v int) predicate.EventReminderNotification {
	return predicate.EventReminderNotification(sql.FieldEQ(FieldEventID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.EventReminderNotification {
	return predicate.EventReminderNotification(sql.FieldEQ(FieldUserID, v))
}

// DaysLeft applies equality check predicate on the "days_left" field. It's identical to DaysLeftEQ.
func DaysLeft(v int) predicate.EventReminderNotification {
	return predicate.EventReminderNotification(sql.FieldEQ(FieldDaysLeft, v))
}

// SentAt applies equality check predicate on the "sent_at" field. It's identical to SentAtEQ.
func SentAt(v time.Time) predicate.EventReminderNotification {
	return predicate.EventReminderNotification(sql.FieldEQ(FieldSentAt, v))
}

// EventIDEQ applies the EQ predicate on the "event_id" field.
func EventIDEQ(v int) predicate.EventReminderNotification {
	return predicate.EventReminderNotification(sql.FieldEQ(FieldEventID, v))
}

// EventIDNEQ applies the NEQ predicate on the "event_id" field.
func EventIDNEQ(v int) predicate.EventReminderNotification {
	return predicate.EventReminderNotification(sql.FieldNEQ(FieldEventID, v))
}

// EventIDIn applies the In predicate on the "event_id" field.
func EventIDIn(vs ...int) predicate.EventReminderNotification {
	return predicate.EventReminderNotification(sql.FieldIn(FieldEventID, vs...))
}

// EventIDNotIn applies the NotIn predicate on the "event_id" field.
func EventIDNotIn(vs ...int) predicate.EventReminderNotification {
	return predicate.EventReminderNotification(sql.FieldNotIn(FieldEventID, vs...))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.EventReminderNotification {
	return predicate.EventReminderNotification(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.EventReminderNotification {
	return predicate.EventReminderNotification(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.EventReminderNotification {
	return predicate.EventReminderNotification(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.EventReminderNotification {
	return predicate.EventReminderNotification(sql.FieldNotIn(FieldUserID, vs...))
}

// DaysLeftEQ applies the EQ predicate on the "days_left" field.
func DaysLeftEQ(v int) predicate.EventReminderNotification {
	return predicate.EventReminderNotification(sql.FieldEQ(FieldDaysLeft, v))
}

// DaysLeftNEQ applies the NEQ predicate on the "days_left" field.
func DaysLeftNEQ(v int) predicate.EventReminderNotification {
	return predicate.EventReminderNotification(sql.FieldNEQ(FieldDaysLeft, v))
}

// DaysLeftIn applies the In predicate on the "days_left" field.
func DaysLeftIn(vs ...int) predicate.EventReminderNotification {
	return predicate.EventReminderNotification(sql.FieldIn(FieldDaysLeft, vs...))
}

// DaysLeftNotIn applies the NotIn predicate on the "days_left" field.
func DaysLeftNotIn(vs ...int) predicate.EventReminderNotification {
	return predicate.EventReminderNotification(sql.FieldNotIn(FieldDaysLeft, vs...))
}

// DaysLeftGT applies the GT predicate on the "days_left" field.
func DaysLeftGT(v int) predicate.EventReminderNotification {
	return predicate.EventReminderNotification(sql.FieldGT(FieldDaysLeft, v))
}

// DaysLeftGTE applies the GTE predicate on the "days_left" field.
func DaysLeftGTE(v int) predicate.EventReminderNotification {
	return predicate.EventReminderNotification(sql.FieldGTE(FieldDaysLeft, v))
}

// DaysLeftLT applies the LT predicate on the "days_left" field.
func DaysLeftLT(v int) predicate.EventReminderNotification {
	return predicate.EventReminderNotification(sql.FieldLT(FieldDaysLeft, v))
}

// DaysLeftLTE applies the LTE predicate on the "days_left" field.
func DaysLeftLTE(v int) predicate.EventReminderNotification {
	return predicate.EventReminderNotification(sql.FieldLTE(FieldDaysLeft, v))
}

// SentAtEQ applies the EQ predicate on the "sent_at" field.
func SentAtEQ(v time.Time) predicate.EventReminderNotification {
	return predicate.EventReminderNotification(sql.FieldEQ(FieldSentAt, v))
}

// SentAtNEQ applies the NEQ predicate on the "sent_at" field.
func SentAtNEQ(v time.Time) predicate.EventReminderNotification {
	return predicate.EventReminderNotification(sql.FieldNEQ(FieldSentAt, v))
}

// SentAtIn applies the In predicate on the "sent_at" field.
func SentAtIn(vs ...time.Time) predicate.EventReminderNotification {
	return predicate.EventReminderNotification(sql.FieldIn(FieldSentAt, vs...))
}

// SentAtNotIn applies the NotIn predicate on the "sent_at" field.
func SentAtNotIn(vs ...time.Time) predicate.EventReminderNotification {
	return predicate.EventReminderNotification(sql.FieldNotIn(FieldSentAt, vs...))
}

// SentAtGT applies the GT predicate on the "sent_at" field.
func SentAtGT(v time.Time) predicate.EventReminderNotification {
	return predicate.EventReminderNotification(sql.FieldGT(FieldSentAt, v))
}

// SentAtGTE applies the GTE predicate on the "sent_at" field.
func SentAtGTE(v time.Time) predicate.EventReminderNotification {
	return predicate.EventReminderNotification(sql.FieldGTE(FieldSentAt, v))
}

// SentAtLT applies the LT predicate on the "sent_at" field.
func SentAtLT(v time.Time) predicate.EventReminderNotification {
	return predicate.EventReminderNotification(sql.FieldLT(FieldSentAt, v))
}

// SentAtLTE applies the LTE predicate on the "sent_at" field.
func SentAtLTE(v time.Time) predicate.EventReminderNotification {
	return predicate.EventReminderNotification(sql.FieldLTE(FieldSentAt, v))
}

// HasEvent applies the HasEdge predicate on the "event" edge.
func HasEvent() predicate.EventReminderNotification {
	return predicate.EventReminderNotification(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EventTable, EventColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEventWith applies the HasEdge predicate on the "event" edge with a given conditions (other predicates).
func HasEventWith(preds ...predicate.Event) predicate.EventReminderNotification {
	return predicate.EventReminderNotification(func(s *sql.Selector) {
		step := newEventStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.EventReminderNotification {
	return predicate.EventReminderNotification(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.EventReminderNotification {
	return predicate.EventReminderNotification(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.EventReminderNotification) predicate.EventReminderNotification {
	return predicate.EventReminderNotification(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.EventReminderNotification) predicate.EventReminderNotification {
	return predicate.EventReminderNotification(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.EventReminderNotification) predicate.EventReminderNotification {
	return predicate.EventReminderNotification(func(s *sql.Selector) {
		p(s.Not())
	})
}
