// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"happ/ent/event"
	"happ/ent/eventuser"
	"happ/ent/user"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// EventUser is the model entity for the EventUser schema.
type EventUser struct {
	config `json:"-"`
	// EventID holds the value of the "event_id" field.
	EventID int `json:"event_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// Admin holds the value of the "admin" field.
	Admin bool `json:"admin,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EventUserQuery when eager-loading is set.
	Edges EventUserEdges `json:"edges"`
}

// EventUserEdges holds the relations/edges for other nodes in the graph.
type EventUserEdges struct {
	// Event holds the value of the event edge.
	Event *Event `json:"event,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]*int
}

// EventOrErr returns the Event value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventUserEdges) EventOrErr() (*Event, error) {
	if e.loadedTypes[0] {
		if e.Event == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: event.Label}
		}
		return e.Event, nil
	}
	return nil, &NotLoadedError{edge: "event"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventUserEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EventUser) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case eventuser.FieldAdmin:
			values[i] = new(sql.NullBool)
		case eventuser.FieldEventID, eventuser.FieldUserID:
			values[i] = new(sql.NullInt64)
		case eventuser.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type EventUser", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EventUser fields.
func (eu *EventUser) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case eventuser.FieldEventID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field event_id", values[i])
			} else if value.Valid {
				eu.EventID = int(value.Int64)
			}
		case eventuser.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				eu.UserID = int(value.Int64)
			}
		case eventuser.FieldAdmin:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field admin", values[i])
			} else if value.Valid {
				eu.Admin = value.Bool
			}
		case eventuser.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				eu.CreatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryEvent queries the "event" edge of the EventUser entity.
func (eu *EventUser) QueryEvent() *EventQuery {
	return (&EventUserClient{config: eu.config}).QueryEvent(eu)
}

// QueryUser queries the "user" edge of the EventUser entity.
func (eu *EventUser) QueryUser() *UserQuery {
	return (&EventUserClient{config: eu.config}).QueryUser(eu)
}

// Update returns a builder for updating this EventUser.
// Note that you need to call EventUser.Unwrap() before calling this method if this EventUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (eu *EventUser) Update() *EventUserUpdateOne {
	return (&EventUserClient{config: eu.config}).UpdateOne(eu)
}

// Unwrap unwraps the EventUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (eu *EventUser) Unwrap() *EventUser {
	_tx, ok := eu.config.driver.(*txDriver)
	if !ok {
		panic("ent: EventUser is not a transactional entity")
	}
	eu.config.driver = _tx.drv
	return eu
}

// String implements the fmt.Stringer.
func (eu *EventUser) String() string {
	var builder strings.Builder
	builder.WriteString("EventUser(")
	builder.WriteString("event_id=")
	builder.WriteString(fmt.Sprintf("%v", eu.EventID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", eu.UserID))
	builder.WriteString(", ")
	builder.WriteString("admin=")
	builder.WriteString(fmt.Sprintf("%v", eu.Admin))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(eu.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// EventUsers is a parsable slice of EventUser.
type EventUsers []*EventUser

func (eu EventUsers) config(cfg config) {
	for _i := range eu {
		eu[_i].config = cfg
	}
}
