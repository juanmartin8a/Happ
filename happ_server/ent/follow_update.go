// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"happ/ent/follow"
	"happ/ent/predicate"
	"happ/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FollowUpdate is the builder for updating Follow entities.
type FollowUpdate struct {
	config
	hooks    []Hook
	mutation *FollowMutation
}

// Where appends a list predicates to the FollowUpdate builder.
func (fu *FollowUpdate) Where(ps ...predicate.Follow) *FollowUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetUserID sets the "user_id" field.
func (fu *FollowUpdate) SetUserID(i int) *FollowUpdate {
	fu.mutation.SetUserID(i)
	return fu
}

// SetFollowerID sets the "follower_id" field.
func (fu *FollowUpdate) SetFollowerID(i int) *FollowUpdate {
	fu.mutation.SetFollowerID(i)
	return fu
}

// SetValid sets the "valid" field.
func (fu *FollowUpdate) SetValid(b bool) *FollowUpdate {
	fu.mutation.SetValid(b)
	return fu
}

// SetNillableValid sets the "valid" field if the given value is not nil.
func (fu *FollowUpdate) SetNillableValid(b *bool) *FollowUpdate {
	if b != nil {
		fu.SetValid(*b)
	}
	return fu
}

// SetUser sets the "user" edge to the User entity.
func (fu *FollowUpdate) SetUser(u *User) *FollowUpdate {
	return fu.SetUserID(u.ID)
}

// SetFollower sets the "follower" edge to the User entity.
func (fu *FollowUpdate) SetFollower(u *User) *FollowUpdate {
	return fu.SetFollowerID(u.ID)
}

// Mutation returns the FollowMutation object of the builder.
func (fu *FollowUpdate) Mutation() *FollowMutation {
	return fu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (fu *FollowUpdate) ClearUser() *FollowUpdate {
	fu.mutation.ClearUser()
	return fu
}

// ClearFollower clears the "follower" edge to the User entity.
func (fu *FollowUpdate) ClearFollower() *FollowUpdate {
	fu.mutation.ClearFollower()
	return fu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FollowUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, FollowMutation](ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FollowUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FollowUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FollowUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fu *FollowUpdate) check() error {
	if _, ok := fu.mutation.UserID(); fu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Follow.user"`)
	}
	if _, ok := fu.mutation.FollowerID(); fu.mutation.FollowerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Follow.follower"`)
	}
	return nil
}

func (fu *FollowUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(follow.Table, follow.Columns, sqlgraph.NewFieldSpec(follow.FieldUserID, field.TypeInt), sqlgraph.NewFieldSpec(follow.FieldFollowerID, field.TypeInt))
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.Valid(); ok {
		_spec.SetField(follow.FieldValid, field.TypeBool, value)
	}
	if fu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   follow.UserTable,
			Columns: []string{follow.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   follow.UserTable,
			Columns: []string{follow.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.FollowerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   follow.FollowerTable,
			Columns: []string{follow.FollowerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.FollowerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   follow.FollowerTable,
			Columns: []string{follow.FollowerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{follow.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// FollowUpdateOne is the builder for updating a single Follow entity.
type FollowUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FollowMutation
}

// SetUserID sets the "user_id" field.
func (fuo *FollowUpdateOne) SetUserID(i int) *FollowUpdateOne {
	fuo.mutation.SetUserID(i)
	return fuo
}

// SetFollowerID sets the "follower_id" field.
func (fuo *FollowUpdateOne) SetFollowerID(i int) *FollowUpdateOne {
	fuo.mutation.SetFollowerID(i)
	return fuo
}

// SetValid sets the "valid" field.
func (fuo *FollowUpdateOne) SetValid(b bool) *FollowUpdateOne {
	fuo.mutation.SetValid(b)
	return fuo
}

// SetNillableValid sets the "valid" field if the given value is not nil.
func (fuo *FollowUpdateOne) SetNillableValid(b *bool) *FollowUpdateOne {
	if b != nil {
		fuo.SetValid(*b)
	}
	return fuo
}

// SetUser sets the "user" edge to the User entity.
func (fuo *FollowUpdateOne) SetUser(u *User) *FollowUpdateOne {
	return fuo.SetUserID(u.ID)
}

// SetFollower sets the "follower" edge to the User entity.
func (fuo *FollowUpdateOne) SetFollower(u *User) *FollowUpdateOne {
	return fuo.SetFollowerID(u.ID)
}

// Mutation returns the FollowMutation object of the builder.
func (fuo *FollowUpdateOne) Mutation() *FollowMutation {
	return fuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (fuo *FollowUpdateOne) ClearUser() *FollowUpdateOne {
	fuo.mutation.ClearUser()
	return fuo
}

// ClearFollower clears the "follower" edge to the User entity.
func (fuo *FollowUpdateOne) ClearFollower() *FollowUpdateOne {
	fuo.mutation.ClearFollower()
	return fuo
}

// Where appends a list predicates to the FollowUpdate builder.
func (fuo *FollowUpdateOne) Where(ps ...predicate.Follow) *FollowUpdateOne {
	fuo.mutation.Where(ps...)
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FollowUpdateOne) Select(field string, fields ...string) *FollowUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Follow entity.
func (fuo *FollowUpdateOne) Save(ctx context.Context) (*Follow, error) {
	return withHooks[*Follow, FollowMutation](ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FollowUpdateOne) SaveX(ctx context.Context) *Follow {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FollowUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FollowUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fuo *FollowUpdateOne) check() error {
	if _, ok := fuo.mutation.UserID(); fuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Follow.user"`)
	}
	if _, ok := fuo.mutation.FollowerID(); fuo.mutation.FollowerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Follow.follower"`)
	}
	return nil
}

func (fuo *FollowUpdateOne) sqlSave(ctx context.Context) (_node *Follow, err error) {
	if err := fuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(follow.Table, follow.Columns, sqlgraph.NewFieldSpec(follow.FieldUserID, field.TypeInt), sqlgraph.NewFieldSpec(follow.FieldFollowerID, field.TypeInt))
	if id, ok := fuo.mutation.UserID(); !ok {
		return nil, &ValidationError{Name: "user_id", err: errors.New(`ent: missing "Follow.user_id" for update`)}
	} else {
		_spec.Node.CompositeID[0].Value = id
	}
	if id, ok := fuo.mutation.FollowerID(); !ok {
		return nil, &ValidationError{Name: "follower_id", err: errors.New(`ent: missing "Follow.follower_id" for update`)}
	} else {
		_spec.Node.CompositeID[1].Value = id
	}
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, len(fields))
		for i, f := range fields {
			if !follow.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			_spec.Node.Columns[i] = f
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.Valid(); ok {
		_spec.SetField(follow.FieldValid, field.TypeBool, value)
	}
	if fuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   follow.UserTable,
			Columns: []string{follow.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   follow.UserTable,
			Columns: []string{follow.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.FollowerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   follow.FollowerTable,
			Columns: []string{follow.FollowerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.FollowerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   follow.FollowerTable,
			Columns: []string{follow.FollowerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Follow{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{follow.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}
