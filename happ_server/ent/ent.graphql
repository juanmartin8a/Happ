directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type Device implements Node {
  id: ID!
  userID: Int!
  token: String!
  createdAt: Time!
  owner: User
}
type Event implements Node {
  id: ID!
  name: String!
  description: String!
  eventPlace: String!
  confirmedCount: Int!
  confirmedHosts: Int!
  eventPics: [String!]!
  lightEventPics: [String!]!
  eventKey: String!
  eventNonce: String!
  eventDate: Time!
  coords: Point!
  createdAt: Time!
  updatedAt: Time!
  users: [User!]
  eventReminderNotifications: [EventReminderNotification!]
}
type EventReminderNotification implements Node {
  id: ID!
  eventID: ID!
  userID: ID!
  daysLeft: Int!
  sentAt: Time!
  event: Event!
  user: User!
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "happ/ent.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
}
"""The builtin Time type"""
scalar Time
type User implements Node {
  id: ID!
  fuid: String!
  name: String!
  username: String!
  email: String!
  profilePic: String!
  createdAt: Time!
  updatedAt: Time!
  events: [Event!]
  followers: [User!]
  following: [User!]
  devices: [Device!]
  eventReminderNotifications: [EventReminderNotification!]
}
