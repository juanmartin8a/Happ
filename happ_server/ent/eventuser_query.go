// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"happ/ent/event"
	"happ/ent/eventuser"
	"happ/ent/predicate"
	"happ/ent/user"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// EventUserQuery is the builder for querying EventUser entities.
type EventUserQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.EventUser
	withEvent  *EventQuery
	withUser   *UserQuery
	modifiers  []func(*sql.Selector)
	loadTotal  []func(context.Context, []*EventUser) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the EventUserQuery builder.
func (euq *EventUserQuery) Where(ps ...predicate.EventUser) *EventUserQuery {
	euq.predicates = append(euq.predicates, ps...)
	return euq
}

// Limit adds a limit step to the query.
func (euq *EventUserQuery) Limit(limit int) *EventUserQuery {
	euq.limit = &limit
	return euq
}

// Offset adds an offset step to the query.
func (euq *EventUserQuery) Offset(offset int) *EventUserQuery {
	euq.offset = &offset
	return euq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (euq *EventUserQuery) Unique(unique bool) *EventUserQuery {
	euq.unique = &unique
	return euq
}

// Order adds an order step to the query.
func (euq *EventUserQuery) Order(o ...OrderFunc) *EventUserQuery {
	euq.order = append(euq.order, o...)
	return euq
}

// QueryEvent chains the current query on the "event" edge.
func (euq *EventUserQuery) QueryEvent() *EventQuery {
	query := &EventQuery{config: euq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := euq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := euq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(eventuser.Table, eventuser.EventColumn, selector),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, eventuser.EventTable, eventuser.EventColumn),
		)
		fromU = sqlgraph.SetNeighbors(euq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUser chains the current query on the "user" edge.
func (euq *EventUserQuery) QueryUser() *UserQuery {
	query := &UserQuery{config: euq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := euq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := euq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(eventuser.Table, eventuser.UserColumn, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, eventuser.UserTable, eventuser.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(euq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first EventUser entity from the query.
// Returns a *NotFoundError when no EventUser was found.
func (euq *EventUserQuery) First(ctx context.Context) (*EventUser, error) {
	nodes, err := euq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{eventuser.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (euq *EventUserQuery) FirstX(ctx context.Context) *EventUser {
	node, err := euq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// Only returns a single EventUser entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one EventUser entity is found.
// Returns a *NotFoundError when no EventUser entities are found.
func (euq *EventUserQuery) Only(ctx context.Context) (*EventUser, error) {
	nodes, err := euq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{eventuser.Label}
	default:
		return nil, &NotSingularError{eventuser.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (euq *EventUserQuery) OnlyX(ctx context.Context) *EventUser {
	node, err := euq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// All executes the query and returns a list of EventUsers.
func (euq *EventUserQuery) All(ctx context.Context) ([]*EventUser, error) {
	if err := euq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return euq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (euq *EventUserQuery) AllX(ctx context.Context) []*EventUser {
	nodes, err := euq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// Count returns the count of the given query.
func (euq *EventUserQuery) Count(ctx context.Context) (int, error) {
	if err := euq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return euq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (euq *EventUserQuery) CountX(ctx context.Context) int {
	count, err := euq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (euq *EventUserQuery) Exist(ctx context.Context) (bool, error) {
	if err := euq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return euq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (euq *EventUserQuery) ExistX(ctx context.Context) bool {
	exist, err := euq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the EventUserQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (euq *EventUserQuery) Clone() *EventUserQuery {
	if euq == nil {
		return nil
	}
	return &EventUserQuery{
		config:     euq.config,
		limit:      euq.limit,
		offset:     euq.offset,
		order:      append([]OrderFunc{}, euq.order...),
		predicates: append([]predicate.EventUser{}, euq.predicates...),
		withEvent:  euq.withEvent.Clone(),
		withUser:   euq.withUser.Clone(),
		// clone intermediate query.
		sql:    euq.sql.Clone(),
		path:   euq.path,
		unique: euq.unique,
	}
}

// WithEvent tells the query-builder to eager-load the nodes that are connected to
// the "event" edge. The optional arguments are used to configure the query builder of the edge.
func (euq *EventUserQuery) WithEvent(opts ...func(*EventQuery)) *EventUserQuery {
	query := &EventQuery{config: euq.config}
	for _, opt := range opts {
		opt(query)
	}
	euq.withEvent = query
	return euq
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (euq *EventUserQuery) WithUser(opts ...func(*UserQuery)) *EventUserQuery {
	query := &UserQuery{config: euq.config}
	for _, opt := range opts {
		opt(query)
	}
	euq.withUser = query
	return euq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		EventID int `json:"event_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.EventUser.Query().
//		GroupBy(eventuser.FieldEventID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (euq *EventUserQuery) GroupBy(field string, fields ...string) *EventUserGroupBy {
	grbuild := &EventUserGroupBy{config: euq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := euq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return euq.sqlQuery(ctx), nil
	}
	grbuild.label = eventuser.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		EventID int `json:"event_id,omitempty"`
//	}
//
//	client.EventUser.Query().
//		Select(eventuser.FieldEventID).
//		Scan(ctx, &v)
//
func (euq *EventUserQuery) Select(fields ...string) *EventUserSelect {
	euq.fields = append(euq.fields, fields...)
	selbuild := &EventUserSelect{EventUserQuery: euq}
	selbuild.label = eventuser.Label
	selbuild.flds, selbuild.scan = &euq.fields, selbuild.Scan
	return selbuild
}

func (euq *EventUserQuery) prepareQuery(ctx context.Context) error {
	for _, f := range euq.fields {
		if !eventuser.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if euq.path != nil {
		prev, err := euq.path(ctx)
		if err != nil {
			return err
		}
		euq.sql = prev
	}
	return nil
}

func (euq *EventUserQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*EventUser, error) {
	var (
		nodes       = []*EventUser{}
		_spec       = euq.querySpec()
		loadedTypes = [2]bool{
			euq.withEvent != nil,
			euq.withUser != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		return (*EventUser).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		node := &EventUser{config: euq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(euq.modifiers) > 0 {
		_spec.Modifiers = euq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, euq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := euq.withEvent; query != nil {
		if err := euq.loadEvent(ctx, query, nodes, nil,
			func(n *EventUser, e *Event) { n.Edges.Event = e }); err != nil {
			return nil, err
		}
	}
	if query := euq.withUser; query != nil {
		if err := euq.loadUser(ctx, query, nodes, nil,
			func(n *EventUser, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	for i := range euq.loadTotal {
		if err := euq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (euq *EventUserQuery) loadEvent(ctx context.Context, query *EventQuery, nodes []*EventUser, init func(*EventUser), assign func(*EventUser, *Event)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*EventUser)
	for i := range nodes {
		fk := nodes[i].EventID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(event.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "event_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (euq *EventUserQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*EventUser, init func(*EventUser), assign func(*EventUser, *User)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*EventUser)
	for i := range nodes {
		fk := nodes[i].UserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (euq *EventUserQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := euq.querySpec()
	if len(euq.modifiers) > 0 {
		_spec.Modifiers = euq.modifiers
	}
	_spec.Unique = false
	_spec.Node.Columns = nil
	return sqlgraph.CountNodes(ctx, euq.driver, _spec)
}

func (euq *EventUserQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := euq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (euq *EventUserQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   eventuser.Table,
			Columns: eventuser.Columns,
		},
		From:   euq.sql,
		Unique: true,
	}
	if unique := euq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := euq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		for i := range fields {
			_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
		}
	}
	if ps := euq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := euq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := euq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := euq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (euq *EventUserQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(euq.driver.Dialect())
	t1 := builder.Table(eventuser.Table)
	columns := euq.fields
	if len(columns) == 0 {
		columns = eventuser.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if euq.sql != nil {
		selector = euq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if euq.unique != nil && *euq.unique {
		selector.Distinct()
	}
	for _, p := range euq.predicates {
		p(selector)
	}
	for _, p := range euq.order {
		p(selector)
	}
	if offset := euq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := euq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// EventUserGroupBy is the group-by builder for EventUser entities.
type EventUserGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (eugb *EventUserGroupBy) Aggregate(fns ...AggregateFunc) *EventUserGroupBy {
	eugb.fns = append(eugb.fns, fns...)
	return eugb
}

// Scan applies the group-by query and scans the result into the given value.
func (eugb *EventUserGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := eugb.path(ctx)
	if err != nil {
		return err
	}
	eugb.sql = query
	return eugb.sqlScan(ctx, v)
}

func (eugb *EventUserGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range eugb.fields {
		if !eventuser.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := eugb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := eugb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (eugb *EventUserGroupBy) sqlQuery() *sql.Selector {
	selector := eugb.sql.Select()
	aggregation := make([]string, 0, len(eugb.fns))
	for _, fn := range eugb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(eugb.fields)+len(eugb.fns))
		for _, f := range eugb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(eugb.fields...)...)
}

// EventUserSelect is the builder for selecting fields of EventUser entities.
type EventUserSelect struct {
	*EventUserQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (eus *EventUserSelect) Scan(ctx context.Context, v interface{}) error {
	if err := eus.prepareQuery(ctx); err != nil {
		return err
	}
	eus.sql = eus.EventUserQuery.sqlQuery(ctx)
	return eus.sqlScan(ctx, v)
}

func (eus *EventUserSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := eus.sql.Query()
	if err := eus.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
